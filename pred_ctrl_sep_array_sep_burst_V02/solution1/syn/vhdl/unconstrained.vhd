-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity unconstrained is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    R_Hat_a_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    R_Hat_a_ce0 : OUT STD_LOGIC;
    R_Hat_a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_KK_a_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
    X_KK_a_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
    X_KK_a_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
    X_KK_a_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
    Y_Hat_a_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    Y_Hat_a_ce0 : OUT STD_LOGIC;
    Y_Hat_a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Y_Ref_KK_a_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    Y_Ref_KK_a_ce0 : OUT STD_LOGIC;
    Y_Ref_KK_a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    U_KK_a_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    U_KK_a_ce0 : OUT STD_LOGIC;
    U_KK_a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    V_Mul_H_Inv_a_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    V_Mul_H_Inv_a_ce0 : OUT STD_LOGIC;
    V_Mul_H_Inv_a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    unconstrained_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    unconstrained_r_ce0 : OUT STD_LOGIC;
    unconstrained_r_we0 : OUT STD_LOGIC;
    unconstrained_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    theta_kk_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    theta_kk_ce0 : OUT STD_LOGIC;
    theta_kk_we0 : OUT STD_LOGIC;
    theta_kk_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    theta_kk_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of unconstrained is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (53 downto 0) := "000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (53 downto 0) := "000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (53 downto 0) := "000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (53 downto 0) := "000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (53 downto 0) := "000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (53 downto 0) := "000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (53 downto 0) := "000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (53 downto 0) := "000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (53 downto 0) := "000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (53 downto 0) := "001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (53 downto 0) := "010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (53 downto 0) := "100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv64_3F7BDA5119CE075F : STD_LOGIC_VECTOR (63 downto 0) := "0011111101111011110110100101000100011001110011100000011101011111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_1047_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1070 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal grp_fu_1038_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1079 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal reg_1089 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal grp_fu_1054_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1095 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal indvarinc_fu_1113_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal accu_3_1_fu_1153_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal accu_2_1_fu_1177_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal accu_1_1_fu_1193_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal accu_0_1_fu_1201_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_1_fu_1241_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal row_1_reg_1669 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal temp_addr_reg_1674 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond7_fu_1235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_1256_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_reg_1679 : STD_LOGIC_VECTOR (4 downto 0);
    signal col_1_fu_1274_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal col_1_reg_1687 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond6_fu_1268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_1290_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_36_reg_1697 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_fu_1294_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_1701 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_Hat_a_load_reg_1706 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_1_fu_1310_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_1714 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_38_fu_1316_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_38_reg_1719 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond5_fu_1304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_1320_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal row1_cast_fu_1335_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal row1_cast_reg_1728 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal row_2_fu_1345_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal row_2_reg_1736 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_1351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_1741 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond4_fu_1339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal theta_kk_addr_reg_1746 : STD_LOGIC_VECTOR (3 downto 0);
    signal col_2_fu_1362_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal col_2_reg_1754 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_13_fu_1402_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_reg_1759 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond3_fu_1356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_1413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_1774 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal Y_Hat_a_load_reg_1798 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1065_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_reg_1803 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal tmp_25_fu_1051_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_reg_1808 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal row_3_fu_1433_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal row_3_reg_1816 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal unconstrained_addr_reg_1821 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond2_fu_1427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_1468_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_10_reg_1826 : STD_LOGIC_VECTOR (8 downto 0);
    signal col_s_1_fu_1490_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal col_s_1_reg_1837 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal exitcond1_fu_1484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_1525_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_40_reg_1852 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_3_fu_1529_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_29_neg_fu_1539_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_neg_reg_1862 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal theta_kk_load_reg_1867 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_1545_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal tmp_34_fu_1549_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal i_2_fu_1569_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_1885 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal tmp_39_fu_1575_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_39_reg_1890 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_fu_1563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_1579_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp_ce0 : STD_LOGIC;
    signal temp_we0 : STD_LOGIC;
    signal invdar_reg_267 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_1209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal accu_3_2_reg_278 : STD_LOGIC_VECTOR (31 downto 0);
    signal accu_2_2_reg_288 : STD_LOGIC_VECTOR (31 downto 0);
    signal accu_1_2_reg_298 : STD_LOGIC_VECTOR (31 downto 0);
    signal accu_0_2_reg_308 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_reg_318 : STD_LOGIC_VECTOR (3 downto 0);
    signal accu_3_3_reg_329 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal accu_2_3_reg_340 : STD_LOGIC_VECTOR (31 downto 0);
    signal accu_1_3_reg_351 : STD_LOGIC_VECTOR (31 downto 0);
    signal accu_0_s_reg_362 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_reg_373 : STD_LOGIC_VECTOR (2 downto 0);
    signal accu_3_3_be_reg_384 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal accu_2_3_be_reg_402 : STD_LOGIC_VECTOR (31 downto 0);
    signal accu_1_3_be_reg_420 : STD_LOGIC_VECTOR (31 downto 0);
    signal accu_0_be_reg_438 : STD_LOGIC_VECTOR (31 downto 0);
    signal accu_3_5_reg_456 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal accu_2_5_reg_468 : STD_LOGIC_VECTOR (31 downto 0);
    signal accu_1_5_reg_480 : STD_LOGIC_VECTOR (31 downto 0);
    signal accu_0_5_reg_492 : STD_LOGIC_VECTOR (31 downto 0);
    signal accu_value_1_reg_504 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_517 : STD_LOGIC_VECTOR (2 downto 0);
    signal accu_3_5_be_reg_528 : STD_LOGIC_VECTOR (31 downto 0);
    signal accu_2_5_be_reg_548 : STD_LOGIC_VECTOR (31 downto 0);
    signal accu_1_5_be_reg_568 : STD_LOGIC_VECTOR (31 downto 0);
    signal accu_0_5_be_reg_588 : STD_LOGIC_VECTOR (31 downto 0);
    signal row1_reg_608 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal storemerge_reg_620 : STD_LOGIC_VECTOR (31 downto 0);
    signal col2_reg_633 : STD_LOGIC_VECTOR (3 downto 0);
    signal accu_3_7_reg_644 : STD_LOGIC_VECTOR (31 downto 0);
    signal accu_2_7_reg_655 : STD_LOGIC_VECTOR (31 downto 0);
    signal accu_1_7_reg_666 : STD_LOGIC_VECTOR (31 downto 0);
    signal accu_0_7_reg_677 : STD_LOGIC_VECTOR (31 downto 0);
    signal row3_reg_688 : STD_LOGIC_VECTOR (3 downto 0);
    signal accu_3_8_reg_699 : STD_LOGIC_VECTOR (31 downto 0);
    signal accu_2_8_reg_710 : STD_LOGIC_VECTOR (31 downto 0);
    signal accu_1_8_reg_721 : STD_LOGIC_VECTOR (31 downto 0);
    signal accu_0_8_reg_732 : STD_LOGIC_VECTOR (31 downto 0);
    signal col4_reg_743 : STD_LOGIC_VECTOR (3 downto 0);
    signal accu_3_9_reg_755 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal tmp_20_fu_1474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal accu_2_9_reg_767 : STD_LOGIC_VECTOR (31 downto 0);
    signal accu_1_9_reg_779 : STD_LOGIC_VECTOR (31 downto 0);
    signal accu_0_9_reg_791 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_s_reg_803 : STD_LOGIC_VECTOR (2 downto 0);
    signal accu_3_9_be_reg_814 : STD_LOGIC_VECTOR (31 downto 0);
    signal accu_2_9_be_reg_832 : STD_LOGIC_VECTOR (31 downto 0);
    signal accu_1_9_be_reg_850 : STD_LOGIC_VECTOR (31 downto 0);
    signal accu_0_9_be_reg_868 : STD_LOGIC_VECTOR (31 downto 0);
    signal accu_3_s_reg_886 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal accu_2_s_reg_898 : STD_LOGIC_VECTOR (31 downto 0);
    signal accu_1_s_reg_910 : STD_LOGIC_VECTOR (31 downto 0);
    signal accu_0_4_reg_922 : STD_LOGIC_VECTOR (31 downto 0);
    signal accu_value_3_reg_934 : STD_LOGIC_VECTOR (31 downto 0);
    signal i5_reg_947 : STD_LOGIC_VECTOR (2 downto 0);
    signal accu_3_be_reg_958 : STD_LOGIC_VECTOR (31 downto 0);
    signal accu_2_be_reg_978 : STD_LOGIC_VECTOR (31 downto 0);
    signal accu_1_be_reg_998 : STD_LOGIC_VECTOR (31 downto 0);
    signal accu_0_11_be_reg_1018 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_1247_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_1285_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_1407_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_1422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_1439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_fu_1515_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_fu_1520_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal accu_0_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal accu_1_fu_112 : STD_LOGIC_VECTOR (31 downto 0);
    signal accu_2_fu_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal accu_3_fu_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1038_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1038_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_fu_1047_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1047_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_fu_1059_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1054_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal sel_tmp_fu_1119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_1133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_1125_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp6_fu_1147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_1139_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp9_fu_1161_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp1_fu_1169_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp2_fu_1185_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_1252_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal col_cast_fu_1264_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_fu_1280_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_1294_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_19_fu_1320_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_37_fu_1368_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl_fu_1372_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl3_fu_1384_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_1380_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_cast_fu_1392_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_1396_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_cast_fu_1419_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl1_fu_1444_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl2_fu_1456_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl1_cast_fu_1452_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl2_cast_fu_1464_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal col_s_cast_fu_1480_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp4_fu_1496_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp4_cast_fu_1502_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_27_fu_1506_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_27_cast_fu_1511_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_to_int_fu_1535_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_1579_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_1038_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (53 downto 0);

    component predictive_controbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component predictive_controcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component predictive_controdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component predictive_controeOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component predictive_controfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component predictive_controg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component predictive_controhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component unconstrained_temp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    temp_U : component unconstrained_temp
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_address0,
        ce0 => temp_ce0,
        we0 => temp_we0,
        d0 => accu_value_1_reg_504,
        q0 => temp_q0);

    predictive_controbkb_U1 : component predictive_controbkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1038_p0,
        din1 => grp_fu_1038_p1,
        opcode => grp_fu_1038_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_1038_p2);

    predictive_controcud_U2 : component predictive_controcud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1047_p0,
        din1 => grp_fu_1047_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1047_p2);

    predictive_controdEe_U3 : component predictive_controdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_1059_p2,
        dout => tmp_25_fu_1051_p1);

    predictive_controeOg_U4 : component predictive_controeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => grp_fu_1054_p0,
        dout => grp_fu_1054_p1);

    predictive_controfYi_U5 : component predictive_controfYi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1054_p1,
        din1 => tmp_23_reg_1803,
        ce => ap_const_logic_1,
        dout => grp_fu_1059_p2);

    predictive_controg8j_U6 : component predictive_controg8j
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_1095,
        din1 => ap_const_lv64_3F7BDA5119CE075F,
        ce => ap_const_logic_1,
        dout => grp_fu_1065_p2);

    predictive_controhbi_U7 : component predictive_controhbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => X_KK_a_0_read,
        din1 => X_KK_a_1_read,
        din2 => X_KK_a_2_read,
        din3 => X_KK_a_3_read,
        din4 => tmp_8_fu_1294_p5,
        dout => tmp_8_fu_1294_p6);

    predictive_controhbi_U8 : component predictive_controhbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => accu_0_5_reg_492,
        din1 => accu_1_5_reg_480,
        din2 => accu_2_5_reg_468,
        din3 => accu_3_5_reg_456,
        din4 => tmp_19_fu_1320_p5,
        dout => tmp_19_fu_1320_p6);

    predictive_controhbi_U9 : component predictive_controhbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => accu_0_9_reg_791,
        din1 => accu_1_9_reg_779,
        din2 => accu_2_9_reg_767,
        din3 => accu_3_9_reg_755,
        din4 => tmp_40_reg_1852,
        dout => tmp_34_fu_1549_p6);

    predictive_controhbi_U10 : component predictive_controhbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => accu_0_4_reg_922,
        din1 => accu_1_s_reg_910,
        din2 => accu_2_s_reg_898,
        din3 => accu_3_s_reg_886,
        din4 => tmp_33_fu_1579_p5,
        dout => tmp_33_fu_1579_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    accu_0_11_be_reg_1018_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_39_reg_1890 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                accu_0_11_be_reg_1018 <= ap_const_lv32_0;
            elsif ((((tmp_39_reg_1890 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((tmp_39_reg_1890 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((tmp_39_reg_1890 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state53)))) then 
                accu_0_11_be_reg_1018 <= accu_0_4_reg_922;
            end if; 
        end if;
    end process;

    accu_0_2_reg_308_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_1209_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                accu_0_2_reg_308 <= accu_0_1_fu_1201_p3;
            elsif (((exitcond5_fu_1304_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                accu_0_2_reg_308 <= accu_0_5_reg_492;
            end if; 
        end if;
    end process;

    accu_0_4_reg_922_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                accu_0_4_reg_922 <= accu_0_11_be_reg_1018;
            elsif (((tmp_20_fu_1474_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                accu_0_4_reg_922 <= accu_0_8_reg_732;
            end if; 
        end if;
    end process;

    accu_0_5_be_reg_588_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_38_reg_1719 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                accu_0_5_be_reg_588 <= ap_const_lv32_0;
            elsif ((((tmp_38_reg_1719 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((tmp_38_reg_1719 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((tmp_38_reg_1719 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
                accu_0_5_be_reg_588 <= accu_0_5_reg_492;
            end if; 
        end if;
    end process;

    accu_0_5_reg_492_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                accu_0_5_reg_492 <= accu_0_5_be_reg_588;
            elsif (((exitcond6_fu_1268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                accu_0_5_reg_492 <= accu_0_s_reg_362;
            end if; 
        end if;
    end process;

    accu_0_7_reg_677_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_1339_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                accu_0_7_reg_677 <= accu_0_2_reg_308;
            elsif (((exitcond_fu_1563_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                accu_0_7_reg_677 <= accu_0_4_reg_922;
            end if; 
        end if;
    end process;

    accu_0_8_reg_732_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1484_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                accu_0_8_reg_732 <= accu_0_9_reg_791;
            elsif (((exitcond2_fu_1427_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                accu_0_8_reg_732 <= accu_0_7_reg_677;
            end if; 
        end if;
    end process;

    accu_0_9_be_reg_868_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_40_reg_1852 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                accu_0_9_be_reg_868 <= grp_fu_1038_p2;
            elsif ((((tmp_40_reg_1852 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((tmp_40_reg_1852 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((tmp_40_reg_1852 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state48)))) then 
                accu_0_9_be_reg_868 <= accu_0_9_reg_791;
            end if; 
        end if;
    end process;

    accu_0_9_reg_791_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                accu_0_9_reg_791 <= accu_0_9_be_reg_868;
            elsif (((tmp_20_fu_1474_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                accu_0_9_reg_791 <= accu_0_8_reg_732;
            end if; 
        end if;
    end process;

    accu_0_be_reg_438_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_36_reg_1697 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                accu_0_be_reg_438 <= reg_1070;
            elsif ((((tmp_36_reg_1697 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((tmp_36_reg_1697 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((tmp_36_reg_1697 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
                accu_0_be_reg_438 <= accu_0_s_reg_362;
            end if; 
        end if;
    end process;

    accu_0_s_reg_362_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                accu_0_s_reg_362 <= accu_0_be_reg_438;
            elsif (((exitcond7_fu_1235_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                accu_0_s_reg_362 <= accu_0_2_reg_308;
            end if; 
        end if;
    end process;

    accu_1_2_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_1209_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                accu_1_2_reg_298 <= accu_1_1_fu_1193_p3;
            elsif (((exitcond5_fu_1304_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                accu_1_2_reg_298 <= accu_1_5_reg_480;
            end if; 
        end if;
    end process;

    accu_1_3_be_reg_420_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_36_reg_1697 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                accu_1_3_be_reg_420 <= reg_1070;
            elsif ((((tmp_36_reg_1697 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((tmp_36_reg_1697 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((tmp_36_reg_1697 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
                accu_1_3_be_reg_420 <= accu_1_3_reg_351;
            end if; 
        end if;
    end process;

    accu_1_3_reg_351_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                accu_1_3_reg_351 <= accu_1_3_be_reg_420;
            elsif (((exitcond7_fu_1235_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                accu_1_3_reg_351 <= accu_1_2_reg_298;
            end if; 
        end if;
    end process;

    accu_1_5_be_reg_568_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_38_reg_1719 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                accu_1_5_be_reg_568 <= ap_const_lv32_0;
            elsif ((((tmp_38_reg_1719 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((tmp_38_reg_1719 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((tmp_38_reg_1719 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
                accu_1_5_be_reg_568 <= accu_1_5_reg_480;
            end if; 
        end if;
    end process;

    accu_1_5_reg_480_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                accu_1_5_reg_480 <= accu_1_5_be_reg_568;
            elsif (((exitcond6_fu_1268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                accu_1_5_reg_480 <= accu_1_3_reg_351;
            end if; 
        end if;
    end process;

    accu_1_7_reg_666_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_1339_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                accu_1_7_reg_666 <= accu_1_2_reg_298;
            elsif (((exitcond_fu_1563_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                accu_1_7_reg_666 <= accu_1_s_reg_910;
            end if; 
        end if;
    end process;

    accu_1_8_reg_721_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1484_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                accu_1_8_reg_721 <= accu_1_9_reg_779;
            elsif (((exitcond2_fu_1427_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                accu_1_8_reg_721 <= accu_1_7_reg_666;
            end if; 
        end if;
    end process;

    accu_1_9_be_reg_850_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_40_reg_1852 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                accu_1_9_be_reg_850 <= grp_fu_1038_p2;
            elsif ((((tmp_40_reg_1852 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((tmp_40_reg_1852 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((tmp_40_reg_1852 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state48)))) then 
                accu_1_9_be_reg_850 <= accu_1_9_reg_779;
            end if; 
        end if;
    end process;

    accu_1_9_reg_779_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                accu_1_9_reg_779 <= accu_1_9_be_reg_850;
            elsif (((tmp_20_fu_1474_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                accu_1_9_reg_779 <= accu_1_8_reg_721;
            end if; 
        end if;
    end process;

    accu_1_be_reg_998_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_39_reg_1890 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                accu_1_be_reg_998 <= ap_const_lv32_0;
            elsif ((((tmp_39_reg_1890 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((tmp_39_reg_1890 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((tmp_39_reg_1890 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state53)))) then 
                accu_1_be_reg_998 <= accu_1_s_reg_910;
            end if; 
        end if;
    end process;

    accu_1_s_reg_910_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                accu_1_s_reg_910 <= accu_1_be_reg_998;
            elsif (((tmp_20_fu_1474_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                accu_1_s_reg_910 <= accu_1_8_reg_721;
            end if; 
        end if;
    end process;

    accu_2_2_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_1209_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                accu_2_2_reg_288 <= accu_2_1_fu_1177_p3;
            elsif (((exitcond5_fu_1304_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                accu_2_2_reg_288 <= accu_2_5_reg_468;
            end if; 
        end if;
    end process;

    accu_2_3_be_reg_402_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_36_reg_1697 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                accu_2_3_be_reg_402 <= reg_1070;
            elsif ((((tmp_36_reg_1697 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((tmp_36_reg_1697 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((tmp_36_reg_1697 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
                accu_2_3_be_reg_402 <= accu_2_3_reg_340;
            end if; 
        end if;
    end process;

    accu_2_3_reg_340_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                accu_2_3_reg_340 <= accu_2_3_be_reg_402;
            elsif (((exitcond7_fu_1235_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                accu_2_3_reg_340 <= accu_2_2_reg_288;
            end if; 
        end if;
    end process;

    accu_2_5_be_reg_548_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_38_reg_1719 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                accu_2_5_be_reg_548 <= ap_const_lv32_0;
            elsif ((((tmp_38_reg_1719 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((tmp_38_reg_1719 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((tmp_38_reg_1719 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
                accu_2_5_be_reg_548 <= accu_2_5_reg_468;
            end if; 
        end if;
    end process;

    accu_2_5_reg_468_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                accu_2_5_reg_468 <= accu_2_5_be_reg_548;
            elsif (((exitcond6_fu_1268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                accu_2_5_reg_468 <= accu_2_3_reg_340;
            end if; 
        end if;
    end process;

    accu_2_7_reg_655_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_1339_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                accu_2_7_reg_655 <= accu_2_2_reg_288;
            elsif (((exitcond_fu_1563_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                accu_2_7_reg_655 <= accu_2_s_reg_898;
            end if; 
        end if;
    end process;

    accu_2_8_reg_710_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1484_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                accu_2_8_reg_710 <= accu_2_9_reg_767;
            elsif (((exitcond2_fu_1427_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                accu_2_8_reg_710 <= accu_2_7_reg_655;
            end if; 
        end if;
    end process;

    accu_2_9_be_reg_832_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_40_reg_1852 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                accu_2_9_be_reg_832 <= grp_fu_1038_p2;
            elsif ((((tmp_40_reg_1852 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((tmp_40_reg_1852 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((tmp_40_reg_1852 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state48)))) then 
                accu_2_9_be_reg_832 <= accu_2_9_reg_767;
            end if; 
        end if;
    end process;

    accu_2_9_reg_767_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                accu_2_9_reg_767 <= accu_2_9_be_reg_832;
            elsif (((tmp_20_fu_1474_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                accu_2_9_reg_767 <= accu_2_8_reg_710;
            end if; 
        end if;
    end process;

    accu_2_be_reg_978_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_39_reg_1890 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                accu_2_be_reg_978 <= ap_const_lv32_0;
            elsif ((((tmp_39_reg_1890 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((tmp_39_reg_1890 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((tmp_39_reg_1890 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state53)))) then 
                accu_2_be_reg_978 <= accu_2_s_reg_898;
            end if; 
        end if;
    end process;

    accu_2_s_reg_898_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                accu_2_s_reg_898 <= accu_2_be_reg_978;
            elsif (((tmp_20_fu_1474_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                accu_2_s_reg_898 <= accu_2_8_reg_710;
            end if; 
        end if;
    end process;

    accu_3_2_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_1209_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                accu_3_2_reg_278 <= accu_3_1_fu_1153_p3;
            elsif (((exitcond5_fu_1304_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                accu_3_2_reg_278 <= accu_3_5_reg_456;
            end if; 
        end if;
    end process;

    accu_3_3_be_reg_384_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((tmp_36_reg_1697 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((tmp_36_reg_1697 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((tmp_36_reg_1697 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
                accu_3_3_be_reg_384 <= accu_3_3_reg_329;
            elsif (((tmp_36_reg_1697 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                accu_3_3_be_reg_384 <= reg_1070;
            end if; 
        end if;
    end process;

    accu_3_3_reg_329_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                accu_3_3_reg_329 <= accu_3_3_be_reg_384;
            elsif (((exitcond7_fu_1235_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                accu_3_3_reg_329 <= accu_3_2_reg_278;
            end if; 
        end if;
    end process;

    accu_3_5_be_reg_528_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((tmp_38_reg_1719 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((tmp_38_reg_1719 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((tmp_38_reg_1719 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
                accu_3_5_be_reg_528 <= accu_3_5_reg_456;
            elsif (((tmp_38_reg_1719 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                accu_3_5_be_reg_528 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    accu_3_5_reg_456_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                accu_3_5_reg_456 <= accu_3_5_be_reg_528;
            elsif (((exitcond6_fu_1268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                accu_3_5_reg_456 <= accu_3_3_reg_329;
            end if; 
        end if;
    end process;

    accu_3_7_reg_644_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_1339_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                accu_3_7_reg_644 <= accu_3_2_reg_278;
            elsif (((exitcond_fu_1563_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                accu_3_7_reg_644 <= accu_3_s_reg_886;
            end if; 
        end if;
    end process;

    accu_3_8_reg_699_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1484_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                accu_3_8_reg_699 <= accu_3_9_reg_755;
            elsif (((exitcond2_fu_1427_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                accu_3_8_reg_699 <= accu_3_7_reg_644;
            end if; 
        end if;
    end process;

    accu_3_9_be_reg_814_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((tmp_40_reg_1852 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((tmp_40_reg_1852 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((tmp_40_reg_1852 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state48)))) then 
                accu_3_9_be_reg_814 <= accu_3_9_reg_755;
            elsif (((tmp_40_reg_1852 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                accu_3_9_be_reg_814 <= grp_fu_1038_p2;
            end if; 
        end if;
    end process;

    accu_3_9_reg_755_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                accu_3_9_reg_755 <= accu_3_9_be_reg_814;
            elsif (((tmp_20_fu_1474_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                accu_3_9_reg_755 <= accu_3_8_reg_699;
            end if; 
        end if;
    end process;

    accu_3_be_reg_958_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((tmp_39_reg_1890 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((tmp_39_reg_1890 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((tmp_39_reg_1890 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state53)))) then 
                accu_3_be_reg_958 <= accu_3_s_reg_886;
            elsif (((tmp_39_reg_1890 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                accu_3_be_reg_958 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    accu_3_s_reg_886_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                accu_3_s_reg_886 <= accu_3_be_reg_958;
            elsif (((tmp_20_fu_1474_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                accu_3_s_reg_886 <= accu_3_8_reg_699;
            end if; 
        end if;
    end process;

    accu_value_1_reg_504_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                accu_value_1_reg_504 <= reg_1079;
            elsif (((exitcond6_fu_1268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                accu_value_1_reg_504 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    accu_value_3_reg_934_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                accu_value_3_reg_934 <= reg_1089;
            elsif (((tmp_20_fu_1474_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                accu_value_3_reg_934 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    col2_reg_633_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                col2_reg_633 <= col_2_reg_1754;
            elsif (((exitcond4_fu_1339_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                col2_reg_633 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    col4_reg_743_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1484_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                col4_reg_743 <= col_3_fu_1529_p2;
            elsif (((exitcond2_fu_1427_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                col4_reg_743 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    col_reg_373_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                col_reg_373 <= col_1_reg_1687;
            elsif (((exitcond7_fu_1235_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                col_reg_373 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    col_s_reg_803_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                col_s_reg_803 <= col_s_1_reg_1837;
            elsif (((tmp_20_fu_1474_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                col_s_reg_803 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i5_reg_947_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                i5_reg_947 <= i_2_reg_1885;
            elsif (((tmp_20_fu_1474_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                i5_reg_947 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_reg_517_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i_reg_517 <= i_1_reg_1714;
            elsif (((exitcond6_fu_1268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_reg_517 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    invdar_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_1209_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                invdar_reg_267 <= indvarinc_fu_1113_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                invdar_reg_267 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    row1_reg_608_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_1235_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                row1_reg_608 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                row1_reg_608 <= row_2_reg_1736;
            end if; 
        end if;
    end process;

    row3_reg_688_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_1339_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                row3_reg_688 <= ap_const_lv4_0;
            elsif (((exitcond_fu_1563_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                row3_reg_688 <= row_3_reg_1816;
            end if; 
        end if;
    end process;

    row_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_1209_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                row_reg_318 <= ap_const_lv4_0;
            elsif (((exitcond5_fu_1304_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                row_reg_318 <= row_1_reg_1669;
            end if; 
        end if;
    end process;

    storemerge_reg_620_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                storemerge_reg_620 <= grp_fu_1038_p2;
            elsif (((exitcond4_fu_1339_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                storemerge_reg_620 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                R_Hat_a_load_reg_1706 <= R_Hat_a_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                Y_Hat_a_load_reg_1798 <= Y_Hat_a_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                accu_0_fu_108 <= accu_0_1_fu_1201_p3;
                accu_1_fu_112 <= accu_1_1_fu_1193_p3;
                accu_2_fu_116 <= accu_2_1_fu_1177_p3;
                accu_3_fu_120 <= accu_3_1_fu_1153_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                col_1_reg_1687 <= col_1_fu_1274_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                col_2_reg_1754 <= col_2_fu_1362_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                col_s_1_reg_1837 <= col_s_1_fu_1490_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_1_reg_1714 <= i_1_fu_1310_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                i_2_reg_1885 <= i_2_fu_1569_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
                reg_1070 <= grp_fu_1047_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state13))) then
                reg_1079 <= grp_fu_1038_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state26))) then
                reg_1089 <= grp_fu_1038_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state27))) then
                reg_1095 <= grp_fu_1054_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                    row1_cast_reg_1728(3 downto 0) <= row1_cast_fu_1335_p1(3 downto 0);
                row_2_reg_1736 <= row_2_fu_1345_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                row_1_reg_1669 <= row_1_fu_1241_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                row_3_reg_1816 <= row_3_fu_1433_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_1235_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                temp_addr_reg_1674 <= tmp_2_fu_1247_p1(3 - 1 downto 0);
                    tmp_3_reg_1679(4 downto 2) <= tmp_3_fu_1256_p3(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_1339_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                theta_kk_addr_reg_1746 <= tmp_4_fu_1351_p1(4 - 1 downto 0);
                    tmp_4_reg_1741(3 downto 0) <= tmp_4_fu_1351_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                theta_kk_load_reg_1867 <= theta_kk_q0;
                tmp_29_neg_reg_1862 <= tmp_29_neg_fu_1539_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_1427_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    tmp_10_reg_1826(8 downto 2) <= tmp_10_fu_1468_p2(8 downto 2);
                unconstrained_addr_reg_1821 <= tmp_9_fu_1439_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_1356_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                tmp_11_reg_1774 <= tmp_11_fu_1413_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_1356_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                tmp_13_reg_1759 <= tmp_13_fu_1402_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                tmp_23_reg_1803 <= grp_fu_1065_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                tmp_25_reg_1808 <= tmp_25_fu_1051_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_1268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_36_reg_1697 <= tmp_36_fu_1290_p1;
                tmp_8_reg_1701 <= tmp_8_fu_1294_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_1304_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                tmp_38_reg_1719 <= tmp_38_fu_1316_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_1563_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                tmp_39_reg_1890 <= tmp_39_fu_1575_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1484_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                tmp_40_reg_1852 <= tmp_40_fu_1525_p1;
            end if;
        end if;
    end process;
    tmp_3_reg_1679(1 downto 0) <= "00";
    row1_cast_reg_1728(7 downto 4) <= "0000";
    tmp_4_reg_1741(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    tmp_10_reg_1826(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond7_fu_1235_p2, ap_CS_fsm_state4, exitcond6_fu_1268_p2, ap_CS_fsm_state10, exitcond5_fu_1304_p2, ap_CS_fsm_state15, exitcond4_fu_1339_p2, ap_CS_fsm_state16, exitcond3_fu_1356_p2, tmp_11_fu_1413_p2, ap_CS_fsm_state39, exitcond2_fu_1427_p2, ap_CS_fsm_state41, exitcond1_fu_1484_p2, ap_CS_fsm_state50, exitcond_fu_1563_p2, tmp_1_fu_1209_p2, ap_CS_fsm_state40, tmp_20_fu_1474_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_1_fu_1209_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond7_fu_1235_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond6_fu_1268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state10 => 
                if (((exitcond5_fu_1304_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state15 => 
                if (((exitcond4_fu_1339_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                if (((exitcond3_fu_1356_p2 = ap_const_lv1_1) and (tmp_11_fu_1413_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                elsif (((tmp_11_fu_1413_p2 = ap_const_lv1_1) and (exitcond3_fu_1356_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state39 => 
                if (((exitcond2_fu_1427_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state40 => 
                if (((tmp_20_fu_1474_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state41 => 
                if (((exitcond1_fu_1484_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state50 => 
                if (((exitcond_fu_1563_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    R_Hat_a_address0 <= tmp_6_fu_1285_p1(5 - 1 downto 0);

    R_Hat_a_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            R_Hat_a_ce0 <= ap_const_logic_1;
        else 
            R_Hat_a_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    U_KK_a_address0 <= tmp_4_reg_1741(4 - 1 downto 0);

    U_KK_a_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            U_KK_a_ce0 <= ap_const_logic_1;
        else 
            U_KK_a_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    V_Mul_H_Inv_a_address0 <= tmp_28_fu_1515_p1(8 - 1 downto 0);

    V_Mul_H_Inv_a_ce0_assign_proc : process(ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            V_Mul_H_Inv_a_ce0 <= ap_const_logic_1;
        else 
            V_Mul_H_Inv_a_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Y_Hat_a_address0 <= tmp_14_fu_1422_p1(7 - 1 downto 0);

    Y_Hat_a_ce0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            Y_Hat_a_ce0 <= ap_const_logic_1;
        else 
            Y_Hat_a_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Y_Ref_KK_a_address0 <= tmp_15_fu_1407_p1(3 - 1 downto 0);

    Y_Ref_KK_a_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            Y_Ref_KK_a_ce0 <= ap_const_logic_1;
        else 
            Y_Ref_KK_a_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    accu_0_1_fu_1201_p3 <= 
        ap_const_lv32_0 when (sel_tmp6_fu_1147_p2(0) = '1') else 
        accu_0_fu_108;
    accu_1_1_fu_1193_p3 <= 
        accu_1_fu_112 when (sel_tmp6_fu_1147_p2(0) = '1') else 
        sel_tmp2_fu_1185_p3;
    accu_2_1_fu_1177_p3 <= 
        accu_2_fu_116 when (sel_tmp6_fu_1147_p2(0) = '1') else 
        sel_tmp1_fu_1169_p3;
    accu_3_1_fu_1153_p3 <= 
        accu_3_fu_120 when (sel_tmp6_fu_1147_p2(0) = '1') else 
        sel_tmp5_fu_1139_p3;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state39, exitcond2_fu_1427_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((exitcond2_fu_1427_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state39, exitcond2_fu_1427_p2)
    begin
        if (((exitcond2_fu_1427_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col_1_fu_1274_p2 <= std_logic_vector(unsigned(col_reg_373) + unsigned(ap_const_lv3_1));
    col_2_fu_1362_p2 <= std_logic_vector(unsigned(col2_reg_633) + unsigned(ap_const_lv4_1));
    col_3_fu_1529_p2 <= std_logic_vector(unsigned(col4_reg_743) + unsigned(ap_const_lv4_4));
    col_cast_fu_1264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_reg_373),5));
    col_s_1_fu_1490_p2 <= std_logic_vector(unsigned(col_s_reg_803) + unsigned(ap_const_lv3_1));
    col_s_cast_fu_1480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_s_reg_803),4));
    exitcond1_fu_1484_p2 <= "1" when (col_s_reg_803 = ap_const_lv3_4) else "0";
    exitcond2_fu_1427_p2 <= "1" when (row3_reg_688 = ap_const_lv4_C) else "0";
    exitcond3_fu_1356_p2 <= "1" when (col2_reg_633 = ap_const_lv4_8) else "0";
    exitcond4_fu_1339_p2 <= "1" when (row1_reg_608 = ap_const_lv4_C) else "0";
    exitcond5_fu_1304_p2 <= "1" when (i_reg_517 = ap_const_lv3_4) else "0";
    exitcond6_fu_1268_p2 <= "1" when (col_reg_373 = ap_const_lv3_4) else "0";
    exitcond7_fu_1235_p2 <= "1" when (row_reg_318 = ap_const_lv4_8) else "0";
    exitcond_fu_1563_p2 <= "1" when (i5_reg_947 = ap_const_lv3_4) else "0";

    grp_fu_1038_opcode_assign_proc : process(ap_CS_fsm_state10, exitcond5_fu_1304_p2, ap_CS_fsm_state17, ap_CS_fsm_state45, ap_CS_fsm_state50, exitcond_fu_1563_p2, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_1038_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state45) or ((exitcond_fu_1563_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state50)) or ((exitcond5_fu_1304_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            grp_fu_1038_opcode <= ap_const_lv2_0;
        else 
            grp_fu_1038_opcode <= "XX";
        end if; 
    end process;


    grp_fu_1038_p0_assign_proc : process(ap_CS_fsm_state10, temp_q0, ap_CS_fsm_state17, tmp_34_fu_1549_p6, ap_CS_fsm_state45, ap_CS_fsm_state50, accu_value_1_reg_504, storemerge_reg_620, accu_value_3_reg_934, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_1038_p0 <= accu_value_3_reg_934;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_1038_p0 <= tmp_34_fu_1549_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_1038_p0 <= storemerge_reg_620;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_1038_p0 <= temp_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_1038_p0 <= accu_value_1_reg_504;
        else 
            grp_fu_1038_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1038_p1_assign_proc : process(Y_Ref_KK_a_q0, reg_1070, ap_CS_fsm_state10, tmp_19_fu_1320_p6, ap_CS_fsm_state17, ap_CS_fsm_state45, ap_CS_fsm_state50, tmp_33_fu_1579_p6, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_1038_p1 <= tmp_33_fu_1579_p6;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            grp_fu_1038_p1 <= reg_1070;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_1038_p1 <= Y_Ref_KK_a_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_1038_p1 <= tmp_19_fu_1320_p6;
        else 
            grp_fu_1038_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1047_p0_assign_proc : process(R_Hat_a_load_reg_1706, Y_Hat_a_load_reg_1798, theta_kk_load_reg_1867, ap_CS_fsm_state43, ap_CS_fsm_state6, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_1047_p0 <= theta_kk_load_reg_1867;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_1047_p0 <= Y_Hat_a_load_reg_1798;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_1047_p0 <= R_Hat_a_load_reg_1706;
        else 
            grp_fu_1047_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1047_p1_assign_proc : process(reg_1079, tmp_8_reg_1701, tmp_29_fu_1545_p1, ap_CS_fsm_state43, ap_CS_fsm_state6, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_1047_p1 <= tmp_29_fu_1545_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_1047_p1 <= reg_1079;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_1047_p1 <= tmp_8_reg_1701;
        else 
            grp_fu_1047_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1054_p0_assign_proc : process(U_KK_a_q0, ap_CS_fsm_state27, ap_CS_fsm_state33, storemerge_reg_620)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_1054_p0 <= storemerge_reg_620;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_1054_p0 <= U_KK_a_q0;
        else 
            grp_fu_1054_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_1310_p2 <= std_logic_vector(unsigned(i_reg_517) + unsigned(ap_const_lv3_1));
    i_2_fu_1569_p2 <= std_logic_vector(unsigned(i5_reg_947) + unsigned(ap_const_lv3_1));
    indvarinc_fu_1113_p2 <= std_logic_vector(unsigned(invdar_reg_267) + unsigned(ap_const_lv2_1));
    p_shl1_cast_fu_1452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_1444_p3),9));
    p_shl1_fu_1444_p3 <= (row3_reg_688 & ap_const_lv4_0);
    p_shl2_cast_fu_1464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_fu_1456_p3),9));
    p_shl2_fu_1456_p3 <= (row3_reg_688 & ap_const_lv2_0);
    p_shl3_cast_fu_1392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_fu_1384_p3),8));
    p_shl3_fu_1384_p3 <= (tmp_37_fu_1368_p1 & ap_const_lv2_0);
    p_shl_cast_fu_1380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_1372_p3),8));
    p_shl_fu_1372_p3 <= (tmp_37_fu_1368_p1 & ap_const_lv4_0);
    row1_cast_fu_1335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row1_reg_608),8));
    row_1_fu_1241_p2 <= std_logic_vector(unsigned(row_reg_318) + unsigned(ap_const_lv4_1));
    row_2_fu_1345_p2 <= std_logic_vector(unsigned(row1_reg_608) + unsigned(ap_const_lv4_1));
    row_3_fu_1433_p2 <= std_logic_vector(unsigned(row3_reg_688) + unsigned(ap_const_lv4_1));
    sel_tmp1_fu_1169_p3 <= 
        accu_2_fu_116 when (sel_tmp4_fu_1133_p2(0) = '1') else 
        sel_tmp9_fu_1161_p3;
    sel_tmp2_fu_1185_p3 <= 
        ap_const_lv32_0 when (sel_tmp4_fu_1133_p2(0) = '1') else 
        accu_1_fu_112;
    sel_tmp3_fu_1125_p3 <= 
        accu_3_fu_120 when (sel_tmp_fu_1119_p2(0) = '1') else 
        ap_const_lv32_0;
    sel_tmp4_fu_1133_p2 <= "1" when (invdar_reg_267 = ap_const_lv2_1) else "0";
    sel_tmp5_fu_1139_p3 <= 
        accu_3_fu_120 when (sel_tmp4_fu_1133_p2(0) = '1') else 
        sel_tmp3_fu_1125_p3;
    sel_tmp6_fu_1147_p2 <= "1" when (invdar_reg_267 = ap_const_lv2_0) else "0";
    sel_tmp9_fu_1161_p3 <= 
        ap_const_lv32_0 when (sel_tmp_fu_1119_p2(0) = '1') else 
        accu_2_fu_116;
    sel_tmp_fu_1119_p2 <= "1" when (invdar_reg_267 = ap_const_lv2_2) else "0";

    temp_address0_assign_proc : process(temp_addr_reg_1674, ap_CS_fsm_state10, ap_CS_fsm_state16, tmp_15_fu_1407_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            temp_address0 <= tmp_15_fu_1407_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_address0 <= temp_addr_reg_1674;
        else 
            temp_address0 <= "XXX";
        end if; 
    end process;


    temp_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            temp_ce0 <= ap_const_logic_1;
        else 
            temp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_we0_assign_proc : process(ap_CS_fsm_state10, exitcond5_fu_1304_p2)
    begin
        if (((exitcond5_fu_1304_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            temp_we0 <= ap_const_logic_1;
        else 
            temp_we0 <= ap_const_logic_0;
        end if; 
    end process;


    theta_kk_address0_assign_proc : process(theta_kk_addr_reg_1746, ap_CS_fsm_state16, ap_CS_fsm_state41, ap_CS_fsm_state38, tmp_31_fu_1520_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            theta_kk_address0 <= tmp_31_fu_1520_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            theta_kk_address0 <= theta_kk_addr_reg_1746;
        else 
            theta_kk_address0 <= "XXXX";
        end if; 
    end process;


    theta_kk_ce0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state41, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            theta_kk_ce0 <= ap_const_logic_1;
        else 
            theta_kk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    theta_kk_d0_assign_proc : process(ap_CS_fsm_state16, tmp_25_reg_1808, ap_CS_fsm_state38, storemerge_reg_620)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            theta_kk_d0 <= tmp_25_reg_1808;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            theta_kk_d0 <= storemerge_reg_620;
        else 
            theta_kk_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    theta_kk_we0_assign_proc : process(ap_CS_fsm_state16, tmp_11_reg_1774, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((tmp_11_reg_1774 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38)))) then 
            theta_kk_we0 <= ap_const_logic_1;
        else 
            theta_kk_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp4_cast_fu_1502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp4_fu_1496_p2),9));
    tmp4_fu_1496_p2 <= std_logic_vector(unsigned(col4_reg_743) + unsigned(col_s_cast_fu_1480_p1));
    tmp_10_fu_1468_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_1452_p1) - unsigned(p_shl2_cast_fu_1464_p1));
    tmp_11_fu_1413_p2 <= "1" when (unsigned(row1_reg_608) < unsigned(ap_const_lv4_3)) else "0";
    tmp_12_fu_1396_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_1380_p1) - unsigned(p_shl3_cast_fu_1392_p1));
        tmp_13_cast_fu_1419_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_reg_1759),32));

    tmp_13_fu_1402_p2 <= std_logic_vector(unsigned(tmp_12_fu_1396_p2) + unsigned(row1_cast_reg_1728));
    tmp_14_fu_1422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_cast_fu_1419_p1),64));
    tmp_15_fu_1407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col2_reg_633),64));
    tmp_19_fu_1320_p5 <= i_reg_517(2 - 1 downto 0);
    tmp_1_fu_1209_p2 <= "1" when (invdar_reg_267 = ap_const_lv2_3) else "0";
    tmp_20_fu_1474_p2 <= "1" when (col4_reg_743 = ap_const_lv4_C) else "0";
        tmp_27_cast_fu_1511_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_27_fu_1506_p2),32));

    tmp_27_fu_1506_p2 <= std_logic_vector(unsigned(tmp4_cast_fu_1502_p1) + unsigned(tmp_10_reg_1826));
    tmp_28_fu_1515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_cast_fu_1511_p1),64));
    tmp_29_fu_1545_p1 <= tmp_29_neg_reg_1862;
    tmp_29_neg_fu_1539_p2 <= (tmp_29_to_int_fu_1535_p1 xor ap_const_lv32_80000000);
    tmp_29_to_int_fu_1535_p1 <= V_Mul_H_Inv_a_q0;
    tmp_2_fu_1247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_reg_318),64));
    tmp_30_fu_1252_p1 <= row_reg_318(3 - 1 downto 0);
    tmp_31_fu_1520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp4_fu_1496_p2),64));
    tmp_33_fu_1579_p5 <= i5_reg_947(2 - 1 downto 0);
    tmp_36_fu_1290_p1 <= col_reg_373(2 - 1 downto 0);
    tmp_37_fu_1368_p1 <= col2_reg_633(3 - 1 downto 0);
    tmp_38_fu_1316_p1 <= i_reg_517(2 - 1 downto 0);
    tmp_39_fu_1575_p1 <= i5_reg_947(2 - 1 downto 0);
    tmp_3_fu_1256_p3 <= (tmp_30_fu_1252_p1 & ap_const_lv2_0);
    tmp_40_fu_1525_p1 <= col_s_reg_803(2 - 1 downto 0);
    tmp_4_fu_1351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row1_reg_608),64));
    tmp_5_fu_1280_p2 <= std_logic_vector(unsigned(tmp_3_reg_1679) + unsigned(col_cast_fu_1264_p1));
    tmp_6_fu_1285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_1280_p2),64));
    tmp_8_fu_1294_p5 <= col_reg_373(2 - 1 downto 0);
    tmp_9_fu_1439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row3_reg_688),64));
    unconstrained_r_address0 <= unconstrained_addr_reg_1821;

    unconstrained_r_ce0_assign_proc : process(ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            unconstrained_r_ce0 <= ap_const_logic_1;
        else 
            unconstrained_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    unconstrained_r_d0 <= accu_value_3_reg_934;

    unconstrained_r_we0_assign_proc : process(ap_CS_fsm_state50, exitcond_fu_1563_p2)
    begin
        if (((exitcond_fu_1563_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            unconstrained_r_we0 <= ap_const_logic_1;
        else 
            unconstrained_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
