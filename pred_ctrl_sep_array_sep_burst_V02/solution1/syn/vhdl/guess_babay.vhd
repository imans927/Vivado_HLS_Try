-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity guess_babay is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    V_Gen_a_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    V_Gen_a_ce0 : OUT STD_LOGIC;
    V_Gen_a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    H_Hat_Inv_a_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    H_Hat_Inv_a_ce0 : OUT STD_LOGIC;
    H_Hat_Inv_a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    U_unc_kk_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    U_unc_kk_ce0 : OUT STD_LOGIC;
    U_unc_kk_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    theta_kk_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    theta_kk_ce0 : OUT STD_LOGIC;
    theta_kk_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of guess_babay is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (28 downto 0) := "00000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (28 downto 0) := "00000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (28 downto 0) := "00000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (28 downto 0) := "00000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (28 downto 0) := "00000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (28 downto 0) := "00000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (28 downto 0) := "00001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (28 downto 0) := "00010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (28 downto 0) := "00100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (28 downto 0) := "01000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (28 downto 0) := "10000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_BF800000 : STD_LOGIC_VECTOR (31 downto 0) := "10111111100000000000000000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_3F000000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111000000000000000000000000";
    constant ap_const_lv32_BF000000 : STD_LOGIC_VECTOR (31 downto 0) := "10111111000000000000000000000000";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_237_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_265 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_94_reg_609 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_227_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_270 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal row_15_fu_283_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal row_15_reg_531 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal U_babay_addr_reg_536 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond3_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_318_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_reg_541 : STD_LOGIC_VECTOR (8 downto 0);
    signal col_5_fu_334_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal col_5_reg_549 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond2_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_88_neg_fu_423_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_88_neg_reg_573 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal theta_kk_load_reg_578 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_87_fu_429_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal row_1_fu_439_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal row_1_reg_591 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_82_fu_469_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_82_reg_596 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond1_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_6_fu_485_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal col_6_reg_604 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_94_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal V_Gen_a_load_reg_629 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal U_babay_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal U_babay_load_reg_634 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_value_1_fu_521_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal U_babay_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal U_babay_ce0 : STD_LOGIC;
    signal U_babay_we0 : STD_LOGIC;
    signal U_babay_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_reg_146 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_83_reg_157 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_reg_169 : STD_LOGIC_VECTOR (3 downto 0);
    signal babay_rho_reg_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal row1_reg_192 : STD_LOGIC_VECTOR (3 downto 0);
    signal temp_value_reg_204 : STD_LOGIC_VECTOR (31 downto 0);
    signal col2_reg_216 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_289_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_86_fu_349_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_88_fu_354_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_96_fu_506_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_97_fu_511_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_91_fu_516_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_103_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_93_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_108_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_227_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_227_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_fu_237_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_237_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal p_shl_fu_294_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl6_fu_306_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_302_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl6_cast_fu_314_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal col_cast7_fu_324_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_85_fu_340_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_85_cast_fu_345_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_83_to_int_fu_359_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_99_fu_363_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_100_fu_373_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_101_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_102_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_104_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_105_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_106_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_107_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_88_to_int_fu_419_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl7_fu_445_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl8_fu_457_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl7_cast_fu_453_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl8_cast_fu_465_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal col2_cast2_fu_475_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_95_fu_497_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_96_cast_fu_502_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_227_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (28 downto 0);

    component predictive_controbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component predictive_controcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component predictive_controjbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component guess_edu_u_educaibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    U_babay_U : component guess_edu_u_educaibs
    generic map (
        DataWidth => 32,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => U_babay_address0,
        ce0 => U_babay_ce0,
        we0 => U_babay_we0,
        d0 => U_babay_d0,
        q0 => U_babay_q0);

    predictive_controbkb_U36 : component predictive_controbkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_227_p0,
        din1 => grp_fu_227_p1,
        opcode => grp_fu_227_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_227_p2);

    predictive_controcud_U37 : component predictive_controcud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_237_p0,
        din1 => grp_fu_237_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_237_p2);

    predictive_controjbC_U38 : component predictive_controjbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_83_reg_157,
        din1 => ap_const_lv32_3F000000,
        opcode => ap_const_lv5_3,
        dout => tmp_102_fu_241_p2);

    predictive_controjbC_U39 : component predictive_controjbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_83_reg_157,
        din1 => ap_const_lv32_3F000000,
        opcode => ap_const_lv5_4,
        dout => tmp_104_fu_247_p2);

    predictive_controjbC_U40 : component predictive_controjbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_83_reg_157,
        din1 => ap_const_lv32_BF000000,
        opcode => ap_const_lv5_3,
        dout => tmp_106_fu_253_p2);

    predictive_controjbC_U41 : component predictive_controjbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_83_reg_157,
        din1 => ap_const_lv32_BF000000,
        opcode => ap_const_lv5_4,
        dout => tmp_107_fu_259_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond1_fu_433_p2 = ap_const_lv1_1))) then 
                    ap_return_preg <= babay_rho_reg_180;
                end if; 
            end if;
        end if;
    end process;


    babay_rho_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_277_p2 = ap_const_lv1_1))) then 
                babay_rho_reg_180 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                babay_rho_reg_180 <= grp_fu_227_p2;
            end if; 
        end if;
    end process;

    col2_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                col2_reg_216 <= col_6_reg_604;
            elsif (((exitcond1_fu_433_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                col2_reg_216 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    col_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                col_reg_169 <= col_5_reg_549;
            elsif (((exitcond3_fu_277_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                col_reg_169 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    row1_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_277_p2 = ap_const_lv1_1))) then 
                row1_reg_192 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                row1_reg_192 <= row_1_reg_591;
            end if; 
        end if;
    end process;

    row_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_328_p2 = ap_const_lv1_1))) then 
                row_reg_146 <= row_15_reg_531;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                row_reg_146 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    temp_value_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                temp_value_reg_204 <= temp_value_1_fu_521_p3;
            elsif (((exitcond1_fu_433_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                temp_value_reg_204 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    tmp_83_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                tmp_83_reg_157 <= grp_fu_227_p2;
            elsif (((exitcond3_fu_277_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                tmp_83_reg_157 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_277_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                U_babay_addr_reg_536 <= tmp_fu_289_p1(4 - 1 downto 0);
                    tmp_s_reg_541(8 downto 2) <= tmp_s_fu_318_p2(8 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                U_babay_load_reg_634 <= U_babay_q0;
                V_Gen_a_load_reg_629 <= V_Gen_a_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                col_5_reg_549 <= col_5_fu_334_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                col_6_reg_604 <= col_6_fu_485_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((tmp_94_reg_609 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then
                reg_265 <= grp_fu_237_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_270 <= grp_fu_227_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                row_15_reg_531 <= row_15_fu_283_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                row_1_reg_591 <= row_1_fu_439_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                theta_kk_load_reg_578 <= theta_kk_q0;
                tmp_88_neg_reg_573 <= tmp_88_neg_fu_423_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_433_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    tmp_82_reg_596(8 downto 2) <= tmp_82_fu_469_p2(8 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_479_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                tmp_94_reg_609 <= tmp_94_fu_491_p2;
            end if;
        end if;
    end process;
    tmp_s_reg_541(1 downto 0) <= "00";
    tmp_82_reg_596(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_277_p2, ap_CS_fsm_state3, exitcond2_fu_328_p2, ap_CS_fsm_state11, exitcond1_fu_433_p2, ap_CS_fsm_state12, exitcond_fu_479_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_277_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_328_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond1_fu_433_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_479_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    H_Hat_Inv_a_address0 <= tmp_86_fu_349_p1(8 - 1 downto 0);

    H_Hat_Inv_a_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            H_Hat_Inv_a_ce0 <= ap_const_logic_1;
        else 
            H_Hat_Inv_a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    U_babay_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state2, U_babay_addr_reg_536, ap_CS_fsm_state3, exitcond2_fu_328_p2, ap_CS_fsm_state12, tmp_fu_289_p1, tmp_97_fu_511_p1, tmp_103_fu_395_p2, tmp_93_fu_407_p2, tmp_108_fu_413_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            U_babay_address0 <= tmp_97_fu_511_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_103_fu_395_p2 = ap_const_lv1_1) and (exitcond2_fu_328_p2 = ap_const_lv1_1)) or ((tmp_103_fu_395_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_93_fu_407_p2 = ap_const_lv1_1) and (exitcond2_fu_328_p2 = ap_const_lv1_1)) or ((tmp_93_fu_407_p2 = ap_const_lv1_0) and (tmp_103_fu_395_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_108_fu_413_p2 = ap_const_lv1_1) and (exitcond2_fu_328_p2 = ap_const_lv1_1)))) then 
            U_babay_address0 <= U_babay_addr_reg_536;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            U_babay_address0 <= tmp_fu_289_p1(4 - 1 downto 0);
        else 
            U_babay_address0 <= "XXXX";
        end if; 
    end process;


    U_babay_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond2_fu_328_p2, ap_CS_fsm_state12, tmp_103_fu_395_p2, tmp_93_fu_407_p2, tmp_108_fu_413_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_103_fu_395_p2 = ap_const_lv1_1) and (exitcond2_fu_328_p2 = ap_const_lv1_1)) or ((tmp_103_fu_395_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_93_fu_407_p2 = ap_const_lv1_1) and (exitcond2_fu_328_p2 = ap_const_lv1_1)) or ((tmp_93_fu_407_p2 = ap_const_lv1_0) and (tmp_103_fu_395_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_108_fu_413_p2 = ap_const_lv1_1) and (exitcond2_fu_328_p2 = ap_const_lv1_1)))) then 
            U_babay_ce0 <= ap_const_logic_1;
        else 
            U_babay_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    U_babay_d0_assign_proc : process(grp_fu_227_p2, ap_CS_fsm_state10, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond2_fu_328_p2, tmp_103_fu_395_p2, tmp_93_fu_407_p2, tmp_108_fu_413_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            U_babay_d0 <= grp_fu_227_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_103_fu_395_p2 = ap_const_lv1_1) and (exitcond2_fu_328_p2 = ap_const_lv1_1))) then 
            U_babay_d0 <= ap_const_lv32_3F800000;
        elsif (((tmp_93_fu_407_p2 = ap_const_lv1_0) and (tmp_103_fu_395_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_108_fu_413_p2 = ap_const_lv1_1) and (exitcond2_fu_328_p2 = ap_const_lv1_1))) then 
            U_babay_d0 <= ap_const_lv32_BF800000;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or ((tmp_103_fu_395_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_93_fu_407_p2 = ap_const_lv1_1) and (exitcond2_fu_328_p2 = ap_const_lv1_1)))) then 
            U_babay_d0 <= ap_const_lv32_0;
        else 
            U_babay_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    U_babay_we0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state2, exitcond3_fu_277_p2, ap_CS_fsm_state3, exitcond2_fu_328_p2, tmp_103_fu_395_p2, tmp_93_fu_407_p2, tmp_108_fu_413_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_103_fu_395_p2 = ap_const_lv1_1) and (exitcond2_fu_328_p2 = ap_const_lv1_1)) or ((tmp_103_fu_395_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_93_fu_407_p2 = ap_const_lv1_1) and (exitcond2_fu_328_p2 = ap_const_lv1_1)) or ((tmp_93_fu_407_p2 = ap_const_lv1_0) and (tmp_103_fu_395_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_108_fu_413_p2 = ap_const_lv1_1) and (exitcond2_fu_328_p2 = ap_const_lv1_1)) or ((exitcond3_fu_277_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            U_babay_we0 <= ap_const_logic_1;
        else 
            U_babay_we0 <= ap_const_logic_0;
        end if; 
    end process;

    U_unc_kk_address0 <= tmp_91_fu_516_p1(4 - 1 downto 0);

    U_unc_kk_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            U_unc_kk_ce0 <= ap_const_logic_1;
        else 
            U_unc_kk_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    V_Gen_a_address0 <= tmp_96_fu_506_p1(8 - 1 downto 0);

    V_Gen_a_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            V_Gen_a_ce0 <= ap_const_logic_1;
        else 
            V_Gen_a_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11, exitcond1_fu_433_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond1_fu_433_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11, exitcond1_fu_433_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond1_fu_433_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state11, exitcond1_fu_433_p2, babay_rho_reg_180, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond1_fu_433_p2 = ap_const_lv1_1))) then 
            ap_return <= babay_rho_reg_180;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    col2_cast2_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col2_reg_216),9));
    col_5_fu_334_p2 <= std_logic_vector(unsigned(col_reg_169) + unsigned(ap_const_lv4_1));
    col_6_fu_485_p2 <= std_logic_vector(unsigned(col2_reg_216) + unsigned(ap_const_lv4_1));
    col_cast7_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_reg_169),9));
    exitcond1_fu_433_p2 <= "1" when (row1_reg_192 = ap_const_lv4_C) else "0";
    exitcond2_fu_328_p2 <= "1" when (col_reg_169 = ap_const_lv4_C) else "0";
    exitcond3_fu_277_p2 <= "1" when (row_reg_146 = ap_const_lv4_C) else "0";
    exitcond_fu_479_p2 <= "1" when (col2_reg_216 = ap_const_lv4_D) else "0";

    grp_fu_227_opcode_assign_proc : process(tmp_94_reg_609, ap_CS_fsm_state20, ap_CS_fsm_state7, ap_CS_fsm_state16, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_227_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((tmp_94_reg_609 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            grp_fu_227_opcode <= ap_const_lv2_0;
        else 
            grp_fu_227_opcode <= "XX";
        end if; 
    end process;


    grp_fu_227_p0_assign_proc : process(U_unc_kk_q0, ap_CS_fsm_state20, tmp_83_reg_157, babay_rho_reg_180, temp_value_reg_204, ap_CS_fsm_state7, ap_CS_fsm_state16, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_227_p0 <= babay_rho_reg_180;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_227_p0 <= U_unc_kk_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_227_p0 <= temp_value_reg_204;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_227_p0 <= tmp_83_reg_157;
        else 
            grp_fu_227_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_227_p1_assign_proc : process(reg_265, ap_CS_fsm_state20, temp_value_reg_204, ap_CS_fsm_state7, ap_CS_fsm_state16, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_227_p1 <= temp_value_reg_204;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_227_p1 <= reg_265;
        else 
            grp_fu_227_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_237_p0_assign_proc : process(reg_270, tmp_87_fu_429_p1, ap_CS_fsm_state5, V_Gen_a_load_reg_629, ap_CS_fsm_state14, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_237_p0 <= reg_270;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_237_p0 <= V_Gen_a_load_reg_629;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_237_p0 <= tmp_87_fu_429_p1;
        else 
            grp_fu_237_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_237_p1_assign_proc : process(reg_270, theta_kk_load_reg_578, ap_CS_fsm_state5, U_babay_load_reg_634, ap_CS_fsm_state14, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_237_p1 <= reg_270;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_237_p1 <= U_babay_load_reg_634;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_237_p1 <= theta_kk_load_reg_578;
        else 
            grp_fu_237_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    notlhs_fu_377_p2 <= "0" when (tmp_99_fu_363_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_383_p2 <= "1" when (tmp_100_fu_373_p1 = ap_const_lv23_0) else "0";
    p_shl6_cast_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl6_fu_306_p3),9));
    p_shl6_fu_306_p3 <= (row_reg_146 & ap_const_lv2_0);
    p_shl7_cast_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl7_fu_445_p3),9));
    p_shl7_fu_445_p3 <= (row1_reg_192 & ap_const_lv4_0);
    p_shl8_cast_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl8_fu_457_p3),9));
    p_shl8_fu_457_p3 <= (row1_reg_192 & ap_const_lv2_0);
    p_shl_cast_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_294_p3),9));
    p_shl_fu_294_p3 <= (row_reg_146 & ap_const_lv4_0);
    row_15_fu_283_p2 <= std_logic_vector(unsigned(row_reg_146) + unsigned(ap_const_lv4_1));
    row_1_fu_439_p2 <= std_logic_vector(unsigned(row1_reg_192) + unsigned(ap_const_lv4_1));
    temp_value_1_fu_521_p3 <= 
        temp_value_reg_204 when (tmp_94_reg_609(0) = '1') else 
        grp_fu_227_p2;
    theta_kk_address0 <= tmp_88_fu_354_p1(4 - 1 downto 0);

    theta_kk_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            theta_kk_ce0 <= ap_const_logic_1;
        else 
            theta_kk_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_100_fu_373_p1 <= tmp_83_to_int_fu_359_p1(23 - 1 downto 0);
    tmp_101_fu_389_p2 <= (notrhs_fu_383_p2 or notlhs_fu_377_p2);
    tmp_103_fu_395_p2 <= (tmp_102_fu_241_p2 and tmp_101_fu_389_p2);
    tmp_105_fu_401_p2 <= (tmp_104_fu_247_p2 and tmp_101_fu_389_p2);
    tmp_108_fu_413_p2 <= (tmp_107_fu_259_p2 and tmp_101_fu_389_p2);
    tmp_82_fu_469_p2 <= std_logic_vector(unsigned(p_shl7_cast_fu_453_p1) - unsigned(p_shl8_cast_fu_465_p1));
    tmp_83_to_int_fu_359_p1 <= tmp_83_reg_157;
        tmp_85_cast_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_85_fu_340_p2),32));

    tmp_85_fu_340_p2 <= std_logic_vector(unsigned(col_cast7_fu_324_p1) + unsigned(tmp_s_reg_541));
    tmp_86_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_85_cast_fu_345_p1),64));
    tmp_87_fu_429_p1 <= tmp_88_neg_reg_573;
    tmp_88_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_reg_169),64));
    tmp_88_neg_fu_423_p2 <= (tmp_88_to_int_fu_419_p1 xor ap_const_lv32_80000000);
    tmp_88_to_int_fu_419_p1 <= H_Hat_Inv_a_q0;
    tmp_91_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row1_reg_192),64));
    tmp_93_fu_407_p2 <= (tmp_106_fu_253_p2 and tmp_105_fu_401_p2);
    tmp_94_fu_491_p2 <= "1" when (unsigned(col2_reg_216) > unsigned(row1_reg_192)) else "0";
    tmp_95_fu_497_p2 <= std_logic_vector(unsigned(tmp_82_reg_596) + unsigned(col2_cast2_fu_475_p1));
        tmp_96_cast_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_95_fu_497_p2),32));

    tmp_96_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_96_cast_fu_502_p1),64));
    tmp_97_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col2_reg_216),64));
    tmp_99_fu_363_p4 <= tmp_83_to_int_fu_359_p1(30 downto 23);
    tmp_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_reg_146),64));
    tmp_s_fu_318_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_302_p1) - unsigned(p_shl6_cast_fu_314_p1));
end behav;
