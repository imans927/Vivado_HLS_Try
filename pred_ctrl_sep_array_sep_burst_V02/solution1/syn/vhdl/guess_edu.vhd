-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity guess_edu is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    U_KK_a_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    U_KK_a_ce0 : OUT STD_LOGIC;
    U_KK_a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    V_Gen_a_cpy_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    V_Gen_a_cpy_ce0 : OUT STD_LOGIC;
    V_Gen_a_cpy_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    U_unc_kk_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    U_unc_kk_ce0 : OUT STD_LOGIC;
    U_unc_kk_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of guess_edu is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_229_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_233 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_77_reg_455 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal indvarinc_fu_238_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_71_fu_261_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_71_reg_406 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond3_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_266_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_reg_416 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_fu_278_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_reg_424 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond2_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_14_fu_306_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal row_14_reg_437 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_75_fu_336_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_75_reg_442 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond1_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_4_fu_352_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal col_4_reg_450 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_77_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal V_Gen_a_cpy_load_reg_475 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal u_educated_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal u_educated_load_reg_480 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_value_1_fu_388_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_221_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_value_2_reg_495 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal u_educated_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal u_educated_ce0 : STD_LOGIC;
    signal u_educated_we0 : STD_LOGIC;
    signal u_educated_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal invdar_reg_140 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_151 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i1_reg_162 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal educated_rho_reg_174 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_reg_186 : STD_LOGIC_VECTOR (3 downto 0);
    signal temp_value_reg_198 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_reg_210 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_244_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_73_fu_290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_74_fu_295_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_79_fu_373_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_80_fu_378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_76_fu_383_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_221_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_221_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_229_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_229_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_72_fu_284_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_fu_312_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl5_fu_324_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_320_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl5_cast_fu_332_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal col_cast2_fu_342_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_78_fu_364_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_78_cast_fu_369_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_221_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);

    component predictive_controbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component predictive_controcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guess_edu_u_educaibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    u_educated_U : component guess_edu_u_educaibs
    generic map (
        DataWidth => 32,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => u_educated_address0,
        ce0 => u_educated_ce0,
        we0 => u_educated_we0,
        d0 => u_educated_d0,
        q0 => u_educated_q0);

    predictive_controbkb_U30 : component predictive_controbkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_221_p0,
        din1 => grp_fu_221_p1,
        opcode => grp_fu_221_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_221_p2);

    predictive_controcud_U31 : component predictive_controcud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_229_p0,
        din1 => grp_fu_229_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_229_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond1_fu_300_p2 = ap_const_lv1_1))) then 
                    ap_return_preg <= educated_rho_reg_174;
                end if; 
            end if;
        end if;
    end process;


    col_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                col_reg_210 <= col_4_reg_450;
            elsif (((exitcond1_fu_300_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                col_reg_210 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    educated_rho_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_272_p2 = ap_const_lv1_1))) then 
                educated_rho_reg_174 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                educated_rho_reg_174 <= grp_fu_221_p2;
            end if; 
        end if;
    end process;

    i1_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_255_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i1_reg_162 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i1_reg_162 <= i_4_reg_424;
            end if; 
        end if;
    end process;

    i_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_249_p2 = ap_const_lv1_1))) then 
                i_reg_151 <= ap_const_lv4_9;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_reg_151 <= i_3_reg_416;
            end if; 
        end if;
    end process;

    invdar_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_249_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                invdar_reg_140 <= indvarinc_fu_238_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                invdar_reg_140 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    row_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_272_p2 = ap_const_lv1_1))) then 
                row_reg_186 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                row_reg_186 <= row_14_reg_437;
            end if; 
        end if;
    end process;

    temp_value_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                temp_value_reg_198 <= temp_value_1_fu_388_p3;
            elsif (((exitcond1_fu_300_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                temp_value_reg_198 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                V_Gen_a_cpy_load_reg_475 <= V_Gen_a_cpy_q0;
                u_educated_load_reg_480 <= u_educated_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                col_4_reg_450 <= col_4_fu_352_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_255_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                i_3_reg_416 <= i_3_fu_266_p2;
                    tmp_71_reg_406(3 downto 0) <= tmp_71_fu_261_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_4_reg_424 <= i_4_fu_278_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) or ((tmp_77_reg_455 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then
                reg_233 <= grp_fu_229_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                row_14_reg_437 <= row_14_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                temp_value_2_reg_495 <= grp_fu_221_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_300_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    tmp_75_reg_442(8 downto 2) <= tmp_75_fu_336_p2(8 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_346_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                tmp_77_reg_455 <= tmp_77_fu_358_p2;
            end if;
        end if;
    end process;
    tmp_71_reg_406(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    tmp_75_reg_442(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond3_fu_255_p2, ap_CS_fsm_state5, exitcond2_fu_272_p2, ap_CS_fsm_state7, exitcond1_fu_300_p2, ap_CS_fsm_state8, exitcond_fu_346_p2, tmp_s_fu_249_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_249_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond3_fu_255_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_272_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond1_fu_300_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond_fu_346_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    U_KK_a_address0_assign_proc : process(tmp_71_fu_261_p1, ap_CS_fsm_state3, ap_CS_fsm_state5, tmp_73_fu_290_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            U_KK_a_address0 <= tmp_73_fu_290_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            U_KK_a_address0 <= tmp_71_fu_261_p1(4 - 1 downto 0);
        else 
            U_KK_a_address0 <= "XXXX";
        end if; 
    end process;


    U_KK_a_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            U_KK_a_ce0 <= ap_const_logic_1;
        else 
            U_KK_a_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    U_unc_kk_address0 <= tmp_76_fu_383_p1(4 - 1 downto 0);

    U_unc_kk_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            U_unc_kk_ce0 <= ap_const_logic_1;
        else 
            U_unc_kk_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    V_Gen_a_cpy_address0 <= tmp_79_fu_373_p1(8 - 1 downto 0);

    V_Gen_a_cpy_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            V_Gen_a_cpy_ce0 <= ap_const_logic_1;
        else 
            V_Gen_a_cpy_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7, exitcond1_fu_300_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond1_fu_300_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, exitcond1_fu_300_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond1_fu_300_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state7, exitcond1_fu_300_p2, educated_rho_reg_174, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond1_fu_300_p2 = ap_const_lv1_1))) then 
            ap_return <= educated_rho_reg_174;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    col_4_fu_352_p2 <= std_logic_vector(unsigned(col_reg_210) + unsigned(ap_const_lv4_1));
    col_cast2_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_reg_210),9));
    exitcond1_fu_300_p2 <= "1" when (row_reg_186 = ap_const_lv4_C) else "0";
    exitcond2_fu_272_p2 <= "1" when (i1_reg_162 = ap_const_lv4_9) else "0";
    exitcond3_fu_255_p2 <= "1" when (i_reg_151 = ap_const_lv4_C) else "0";
    exitcond_fu_346_p2 <= "1" when (col_reg_210 = ap_const_lv4_C) else "0";

    grp_fu_221_opcode_assign_proc : process(tmp_77_reg_455, ap_CS_fsm_state16, ap_CS_fsm_state12, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_221_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or ((tmp_77_reg_455 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            grp_fu_221_opcode <= ap_const_lv2_0;
        else 
            grp_fu_221_opcode <= "XX";
        end if; 
    end process;


    grp_fu_221_p0_assign_proc : process(U_unc_kk_q0, ap_CS_fsm_state16, educated_rho_reg_174, temp_value_reg_198, ap_CS_fsm_state12, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_221_p0 <= educated_rho_reg_174;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_221_p0 <= U_unc_kk_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_221_p0 <= temp_value_reg_198;
        else 
            grp_fu_221_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_221_p1_assign_proc : process(reg_233, ap_CS_fsm_state16, temp_value_reg_198, ap_CS_fsm_state12, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_221_p1 <= temp_value_reg_198;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_221_p1 <= reg_233;
        else 
            grp_fu_221_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_229_p0_assign_proc : process(V_Gen_a_cpy_load_reg_475, temp_value_2_reg_495, ap_CS_fsm_state10, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_229_p0 <= temp_value_2_reg_495;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_229_p0 <= V_Gen_a_cpy_load_reg_475;
        else 
            grp_fu_229_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_229_p1_assign_proc : process(u_educated_load_reg_480, temp_value_2_reg_495, ap_CS_fsm_state10, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_229_p1 <= temp_value_2_reg_495;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_229_p1 <= u_educated_load_reg_480;
        else 
            grp_fu_229_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_3_fu_266_p2 <= std_logic_vector(unsigned(i_reg_151) + unsigned(ap_const_lv4_1));
    i_4_fu_278_p2 <= std_logic_vector(unsigned(i1_reg_162) + unsigned(ap_const_lv4_1));
    indvarinc_fu_238_p2 <= std_logic_vector(unsigned(invdar_reg_140) + unsigned(ap_const_lv4_1));
    p_shl5_cast_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl5_fu_324_p3),9));
    p_shl5_fu_324_p3 <= (row_reg_186 & ap_const_lv2_0);
    p_shl_cast_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_312_p3),9));
    p_shl_fu_312_p3 <= (row_reg_186 & ap_const_lv4_0);
    row_14_fu_306_p2 <= std_logic_vector(unsigned(row_reg_186) + unsigned(ap_const_lv4_1));
    temp_value_1_fu_388_p3 <= 
        temp_value_reg_198 when (tmp_77_reg_455(0) = '1') else 
        grp_fu_221_p2;
    tmp_71_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_151),64));
    tmp_72_fu_284_p2 <= std_logic_vector(unsigned(i1_reg_162) + unsigned(ap_const_lv4_3));
    tmp_73_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_72_fu_284_p2),64));
    tmp_74_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_162),64));
    tmp_75_fu_336_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_320_p1) - unsigned(p_shl5_cast_fu_332_p1));
    tmp_76_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_reg_186),64));
    tmp_77_fu_358_p2 <= "1" when (unsigned(col_reg_210) > unsigned(row_reg_186)) else "0";
        tmp_78_cast_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_78_fu_364_p2),32));

    tmp_78_fu_364_p2 <= std_logic_vector(unsigned(tmp_75_reg_442) + unsigned(col_cast2_fu_342_p1));
    tmp_79_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_78_cast_fu_369_p1),64));
    tmp_80_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_reg_210),64));
    tmp_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar_reg_140),64));
    tmp_s_fu_249_p2 <= "1" when (invdar_reg_140 = ap_const_lv4_B) else "0";

    u_educated_address0_assign_proc : process(ap_CS_fsm_state2, tmp_71_reg_406, ap_CS_fsm_state8, ap_CS_fsm_state4, ap_CS_fsm_state6, tmp_fu_244_p1, tmp_74_fu_295_p1, tmp_80_fu_378_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            u_educated_address0 <= tmp_80_fu_378_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            u_educated_address0 <= tmp_74_fu_295_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            u_educated_address0 <= tmp_71_reg_406(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            u_educated_address0 <= tmp_fu_244_p1(4 - 1 downto 0);
        else 
            u_educated_address0 <= "XXXX";
        end if; 
    end process;


    u_educated_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            u_educated_ce0 <= ap_const_logic_1;
        else 
            u_educated_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    u_educated_d0_assign_proc : process(U_KK_a_q0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            u_educated_d0 <= U_KK_a_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            u_educated_d0 <= ap_const_lv32_0;
        else 
            u_educated_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    u_educated_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            u_educated_we0 <= ap_const_logic_1;
        else 
            u_educated_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
