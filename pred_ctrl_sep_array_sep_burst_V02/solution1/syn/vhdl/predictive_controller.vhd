-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity predictive_controller is
generic (
    C_M_AXI_DATA_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CRTL_BUS_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CRTL_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_data_AWVALID : OUT STD_LOGIC;
    m_axi_data_AWREADY : IN STD_LOGIC;
    m_axi_data_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_ADDR_WIDTH-1 downto 0);
    m_axi_data_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_ID_WIDTH-1 downto 0);
    m_axi_data_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_AWUSER_WIDTH-1 downto 0);
    m_axi_data_WVALID : OUT STD_LOGIC;
    m_axi_data_WREADY : IN STD_LOGIC;
    m_axi_data_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_DATA_WIDTH-1 downto 0);
    m_axi_data_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_DATA_WIDTH/8-1 downto 0);
    m_axi_data_WLAST : OUT STD_LOGIC;
    m_axi_data_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_ID_WIDTH-1 downto 0);
    m_axi_data_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WUSER_WIDTH-1 downto 0);
    m_axi_data_ARVALID : OUT STD_LOGIC;
    m_axi_data_ARREADY : IN STD_LOGIC;
    m_axi_data_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_ADDR_WIDTH-1 downto 0);
    m_axi_data_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_ID_WIDTH-1 downto 0);
    m_axi_data_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_ARUSER_WIDTH-1 downto 0);
    m_axi_data_RVALID : IN STD_LOGIC;
    m_axi_data_RREADY : OUT STD_LOGIC;
    m_axi_data_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_DATA_WIDTH-1 downto 0);
    m_axi_data_RLAST : IN STD_LOGIC;
    m_axi_data_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_ID_WIDTH-1 downto 0);
    m_axi_data_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_RUSER_WIDTH-1 downto 0);
    m_axi_data_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_BVALID : IN STD_LOGIC;
    m_axi_data_BREADY : OUT STD_LOGIC;
    m_axi_data_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_ID_WIDTH-1 downto 0);
    m_axi_data_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_BUSER_WIDTH-1 downto 0);
    s_axi_crtl_bus_AWVALID : IN STD_LOGIC;
    s_axi_crtl_bus_AWREADY : OUT STD_LOGIC;
    s_axi_crtl_bus_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_crtl_bus_WVALID : IN STD_LOGIC;
    s_axi_crtl_bus_WREADY : OUT STD_LOGIC;
    s_axi_crtl_bus_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_crtl_bus_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_crtl_bus_ARVALID : IN STD_LOGIC;
    s_axi_crtl_bus_ARREADY : OUT STD_LOGIC;
    s_axi_crtl_bus_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_crtl_bus_RVALID : OUT STD_LOGIC;
    s_axi_crtl_bus_RREADY : IN STD_LOGIC;
    s_axi_crtl_bus_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_crtl_bus_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_crtl_bus_BVALID : OUT STD_LOGIC;
    s_axi_crtl_bus_BREADY : IN STD_LOGIC;
    s_axi_crtl_bus_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of predictive_controller is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "predictive_controller,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=11155,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=39,HLS_SYN_FF=10061,HLS_SYN_LUT=11461,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp6_stage0 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp7_stage0 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (79 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (79 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (79 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (79 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (79 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp8_stage0 : STD_LOGIC_VECTOR (79 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (79 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (79 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (79 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (79 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (79 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_90 : STD_LOGIC_VECTOR (7 downto 0) := "10010000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal X_KK_src : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_REF_KK_src : STD_LOGIC_VECTOR (31 downto 0);
    signal U_KK_src : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_HAT_src : STD_LOGIC_VECTOR (31 downto 0);
    signal R_HAT_src : STD_LOGIC_VECTOR (31 downto 0);
    signal V_MUL_H_INV_src : STD_LOGIC_VECTOR (31 downto 0);
    signal V_GEN_src : STD_LOGIC_VECTOR (31 downto 0);
    signal H_HAT_INV_src : STD_LOGIC_VECTOR (31 downto 0);
    signal out_r : STD_LOGIC_VECTOR (31 downto 0);
    signal data_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal data_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp8_iter2 : STD_LOGIC := '0';
    signal ap_block_pp8_stage0 : BOOLEAN;
    signal exitcond10_reg_1548 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond10_reg_1548_pp8_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal data_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal data_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal data_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp7_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp7_stage0 : signal is "none";
    signal ap_enable_reg_pp7_iter1 : STD_LOGIC := '0';
    signal ap_block_pp7_stage0 : BOOLEAN;
    signal exitcond2_reg_1473 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_pp6_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp6_stage0 : signal is "none";
    signal ap_enable_reg_pp6_iter1 : STD_LOGIC := '0';
    signal ap_block_pp6_stage0 : BOOLEAN;
    signal exitcond3_reg_1459 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal exitcond4_reg_1445 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal exitcond5_reg_1431 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal exitcond6_reg_1417 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal exitcond7_reg_1403 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal exitcond8_reg_1389 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal data_AWVALID : STD_LOGIC;
    signal data_AWREADY : STD_LOGIC;
    signal data_WVALID : STD_LOGIC;
    signal data_WREADY : STD_LOGIC;
    signal data_ARVALID : STD_LOGIC;
    signal data_ARREADY : STD_LOGIC;
    signal data_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal data_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal data_RVALID : STD_LOGIC;
    signal data_RREADY : STD_LOGIC;
    signal data_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal data_RLAST : STD_LOGIC;
    signal data_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data_BVALID : STD_LOGIC;
    signal data_BREADY : STD_LOGIC;
    signal data_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal row_reg_595 : STD_LOGIC_VECTOR (2 downto 0);
    signal row1_reg_606 : STD_LOGIC_VECTOR (3 downto 0);
    signal row1_reg_606_pp1_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state18_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state19_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state20_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal row2_reg_618 : STD_LOGIC_VECTOR (3 downto 0);
    signal row2_reg_618_pp2_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state28_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state29_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state30_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal row3_reg_630 : STD_LOGIC_VECTOR (6 downto 0);
    signal row3_reg_630_pp3_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state38_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state39_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state40_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal row4_reg_642 : STD_LOGIC_VECTOR (5 downto 0);
    signal row4_reg_642_pp4_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state48_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state49_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_state50_pp4_stage0_iter2 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal row5_reg_654 : STD_LOGIC_VECTOR (7 downto 0);
    signal row5_reg_654_pp5_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state58_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state59_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_state60_pp5_stage0_iter2 : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal row6_reg_666 : STD_LOGIC_VECTOR (7 downto 0);
    signal row6_reg_666_pp6_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state68_pp6_stage0_iter0 : BOOLEAN;
    signal ap_block_state69_pp6_stage0_iter1 : BOOLEAN;
    signal ap_block_state70_pp6_stage0_iter2 : BOOLEAN;
    signal ap_block_pp6_stage0_11001 : BOOLEAN;
    signal row7_reg_678 : STD_LOGIC_VECTOR (7 downto 0);
    signal row7_reg_678_pp7_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state78_pp7_stage0_iter0 : BOOLEAN;
    signal ap_block_state79_pp7_stage0_iter1 : BOOLEAN;
    signal ap_block_state80_pp7_stage0_iter2 : BOOLEAN;
    signal ap_block_pp7_stage0_11001 : BOOLEAN;
    signal indvar_reg_712 : STD_LOGIC_VECTOR (3 downto 0);
    signal out1_reg_1277 : STD_LOGIC_VECTOR (29 downto 0);
    signal H_HAT_INV_src1_reg_1282 : STD_LOGIC_VECTOR (29 downto 0);
    signal V_GEN_src1_reg_1287 : STD_LOGIC_VECTOR (29 downto 0);
    signal V_MUL_H_INV_src1_reg_1292 : STD_LOGIC_VECTOR (29 downto 0);
    signal R_HAT_src9_reg_1297 : STD_LOGIC_VECTOR (29 downto 0);
    signal Y_HAT_src7_reg_1302 : STD_LOGIC_VECTOR (29 downto 0);
    signal U_KK_src5_reg_1307 : STD_LOGIC_VECTOR (29 downto 0);
    signal Y_REF_KK_src3_reg_1312 : STD_LOGIC_VECTOR (29 downto 0);
    signal X_KK_src1_reg_1317 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_sig_ioackin_data_ARREADY : STD_LOGIC;
    signal data_addr_reg_1328 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal data_addr_1_reg_1334 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_addr_2_reg_1340 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_addr_3_reg_1346 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_addr_4_reg_1352 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_addr_5_reg_1358 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_addr_6_reg_1364 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_addr_7_reg_1370 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond9_fu_939_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal row_4_fu_945_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_fu_951_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_reg_1385 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond8_fu_975_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond8_reg_1389_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal row_5_fu_981_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal row_5_reg_1393 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal data_addr_7_read_reg_1398 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond7_fu_992_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond7_reg_1403_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal row_6_fu_998_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal row_6_reg_1407 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal data_addr_6_read_reg_1412 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond6_fu_1009_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond6_reg_1417_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal row_7_fu_1015_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal row_7_reg_1421 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal data_addr_5_read_reg_1426 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond5_fu_1026_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond5_reg_1431_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal row_8_fu_1032_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal row_8_reg_1435 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal data_addr_4_read_reg_1440 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond4_fu_1043_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_reg_1445_pp5_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal row_9_fu_1049_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_9_reg_1449 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal data_addr_3_read_reg_1454 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_fu_1060_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_reg_1459_pp6_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal row_10_fu_1066_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_10_reg_1463 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp6_iter0 : STD_LOGIC := '0';
    signal data_addr_2_read_reg_1468 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond2_fu_1077_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_1473_pp7_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal row_11_fu_1083_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_11_reg_1477 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp7_iter0 : STD_LOGIC := '0';
    signal data_addr_1_read_reg_1482 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal row_12_fu_1116_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal row_12_reg_1510 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal tmp_68_fu_1122_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_68_reg_1515 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond1_fu_1110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_13_fu_1133_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_13_reg_1528 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal tmp_70_fu_1139_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_70_reg_1533 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_1127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal roh_1_fu_1228_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal roh_1_reg_1543 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal grp_guess_edu_fu_754_ap_ready : STD_LOGIC;
    signal grp_guess_edu_fu_754_ap_done : STD_LOGIC;
    signal grp_guess_babay_fu_746_ap_ready : STD_LOGIC;
    signal grp_guess_babay_fu_746_ap_done : STD_LOGIC;
    signal ap_block_state87_on_subcall_done : BOOLEAN;
    signal exitcond10_fu_1236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp8_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp8_stage0 : signal is "none";
    signal ap_block_state90_pp8_stage0_iter0 : BOOLEAN;
    signal ap_block_state91_pp8_stage0_iter1 : BOOLEAN;
    signal ap_block_state92_pp8_stage0_iter2 : BOOLEAN;
    signal ap_sig_ioackin_data_WREADY : STD_LOGIC;
    signal ap_block_state92_io : BOOLEAN;
    signal ap_block_pp8_stage0_11001 : BOOLEAN;
    signal indvar_next_fu_1242_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp8_iter0 : STD_LOGIC := '0';
    signal U_opt_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal U_opt_load_reg_1562 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state18 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state28 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state38 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state48 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_exit_iter0_state58 : STD_LOGIC;
    signal ap_enable_reg_pp5_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_block_pp6_stage0_subdone : BOOLEAN;
    signal ap_condition_pp6_exit_iter0_state68 : STD_LOGIC;
    signal ap_enable_reg_pp6_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal ap_block_pp7_stage0_subdone : BOOLEAN;
    signal ap_condition_pp7_exit_iter0_state78 : STD_LOGIC;
    signal ap_enable_reg_pp7_iter2 : STD_LOGIC := '0';
    signal ap_sig_ioackin_data_AWREADY : STD_LOGIC;
    signal grp_sph_dec_fu_738_ap_ready : STD_LOGIC;
    signal grp_sph_dec_fu_738_ap_done : STD_LOGIC;
    signal ap_block_pp8_stage0_subdone : BOOLEAN;
    signal ap_condition_pp8_exit_iter0_state90 : STD_LOGIC;
    signal ap_enable_reg_pp8_iter1 : STD_LOGIC := '0';
    signal Y_Ref_KK_a_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Y_Ref_KK_a_ce0 : STD_LOGIC;
    signal Y_Ref_KK_a_we0 : STD_LOGIC;
    signal Y_Ref_KK_a_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal U_KK_a_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal U_KK_a_ce0 : STD_LOGIC;
    signal U_KK_a_we0 : STD_LOGIC;
    signal U_KK_a_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_Hat_a_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal Y_Hat_a_ce0 : STD_LOGIC;
    signal Y_Hat_a_we0 : STD_LOGIC;
    signal Y_Hat_a_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_Hat_a_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal R_Hat_a_ce0 : STD_LOGIC;
    signal R_Hat_a_we0 : STD_LOGIC;
    signal R_Hat_a_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal V_Mul_H_Inv_a_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal V_Mul_H_Inv_a_ce0 : STD_LOGIC;
    signal V_Mul_H_Inv_a_we0 : STD_LOGIC;
    signal V_Mul_H_Inv_a_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal V_Gen_a_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal V_Gen_a_ce0 : STD_LOGIC;
    signal V_Gen_a_we0 : STD_LOGIC;
    signal V_Gen_a_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal V_Gen_a_cpy_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal V_Gen_a_cpy_ce0 : STD_LOGIC;
    signal V_Gen_a_cpy_we0 : STD_LOGIC;
    signal V_Gen_a_cpy_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal H_Hat_Inv_a_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal H_Hat_Inv_a_ce0 : STD_LOGIC;
    signal H_Hat_Inv_a_we0 : STD_LOGIC;
    signal H_Hat_Inv_a_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal U_unc_kk_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal U_unc_kk_ce0 : STD_LOGIC;
    signal U_unc_kk_we0 : STD_LOGIC;
    signal U_unc_kk_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal U_unc_kk_cpy_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal U_unc_kk_cpy_ce0 : STD_LOGIC;
    signal U_unc_kk_cpy_we0 : STD_LOGIC;
    signal U_unc_kk_cpy_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal theta_kk_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal theta_kk_ce0 : STD_LOGIC;
    signal theta_kk_we0 : STD_LOGIC;
    signal theta_kk_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal U_opt_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal U_opt_ce0 : STD_LOGIC;
    signal U_opt_we0 : STD_LOGIC;
    signal grp_unconstrained_fu_723_ap_start : STD_LOGIC;
    signal grp_unconstrained_fu_723_ap_done : STD_LOGIC;
    signal grp_unconstrained_fu_723_ap_idle : STD_LOGIC;
    signal grp_unconstrained_fu_723_ap_ready : STD_LOGIC;
    signal grp_unconstrained_fu_723_R_Hat_a_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_unconstrained_fu_723_R_Hat_a_ce0 : STD_LOGIC;
    signal grp_unconstrained_fu_723_Y_Hat_a_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_unconstrained_fu_723_Y_Hat_a_ce0 : STD_LOGIC;
    signal grp_unconstrained_fu_723_Y_Ref_KK_a_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_unconstrained_fu_723_Y_Ref_KK_a_ce0 : STD_LOGIC;
    signal grp_unconstrained_fu_723_U_KK_a_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_unconstrained_fu_723_U_KK_a_ce0 : STD_LOGIC;
    signal grp_unconstrained_fu_723_V_Mul_H_Inv_a_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_unconstrained_fu_723_V_Mul_H_Inv_a_ce0 : STD_LOGIC;
    signal grp_unconstrained_fu_723_unconstrained_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_unconstrained_fu_723_unconstrained_r_ce0 : STD_LOGIC;
    signal grp_unconstrained_fu_723_unconstrained_r_we0 : STD_LOGIC;
    signal grp_unconstrained_fu_723_unconstrained_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_unconstrained_fu_723_theta_kk_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_unconstrained_fu_723_theta_kk_ce0 : STD_LOGIC;
    signal grp_unconstrained_fu_723_theta_kk_we0 : STD_LOGIC;
    signal grp_unconstrained_fu_723_theta_kk_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sph_dec_fu_738_ap_start : STD_LOGIC;
    signal grp_sph_dec_fu_738_ap_idle : STD_LOGIC;
    signal grp_sph_dec_fu_738_V_Gen_a_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sph_dec_fu_738_V_Gen_a_ce0 : STD_LOGIC;
    signal grp_sph_dec_fu_738_U_unc_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sph_dec_fu_738_U_unc_ce0 : STD_LOGIC;
    signal grp_sph_dec_fu_738_U_opt_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sph_dec_fu_738_U_opt_ce0 : STD_LOGIC;
    signal grp_sph_dec_fu_738_U_opt_we0 : STD_LOGIC;
    signal grp_sph_dec_fu_738_U_opt_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_guess_babay_fu_746_ap_start : STD_LOGIC;
    signal grp_guess_babay_fu_746_ap_idle : STD_LOGIC;
    signal grp_guess_babay_fu_746_V_Gen_a_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_guess_babay_fu_746_V_Gen_a_ce0 : STD_LOGIC;
    signal grp_guess_babay_fu_746_H_Hat_Inv_a_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_guess_babay_fu_746_H_Hat_Inv_a_ce0 : STD_LOGIC;
    signal grp_guess_babay_fu_746_U_unc_kk_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_guess_babay_fu_746_U_unc_kk_ce0 : STD_LOGIC;
    signal grp_guess_babay_fu_746_theta_kk_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_guess_babay_fu_746_theta_kk_ce0 : STD_LOGIC;
    signal grp_guess_babay_fu_746_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_guess_edu_fu_754_ap_start : STD_LOGIC;
    signal grp_guess_edu_fu_754_ap_idle : STD_LOGIC;
    signal grp_guess_edu_fu_754_U_KK_a_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_guess_edu_fu_754_U_KK_a_ce0 : STD_LOGIC;
    signal grp_guess_edu_fu_754_V_Gen_a_cpy_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_guess_edu_fu_754_V_Gen_a_cpy_ce0 : STD_LOGIC;
    signal grp_guess_edu_fu_754_U_unc_kk_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_guess_edu_fu_754_U_unc_kk_ce0 : STD_LOGIC;
    signal grp_guess_edu_fu_754_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_row1_phi_fu_610_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_row2_phi_fu_622_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_row3_phi_fu_634_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_row4_phi_fu_646_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_row5_phi_fu_658_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_row6_phi_fu_670_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_row7_phi_fu_682_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal row8_reg_690 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal row9_reg_701 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal grp_unconstrained_fu_723_ap_start_reg : STD_LOGIC := '0';
    signal grp_sph_dec_fu_738_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal grp_guess_babay_fu_746_ap_start_reg : STD_LOGIC := '0';
    signal grp_guess_edu_fu_754_ap_start_reg : STD_LOGIC := '0';
    signal tmp_s_fu_987_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_62_fu_1004_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_63_fu_1021_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_64_fu_1038_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_65_fu_1055_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_66_fu_1072_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_67_fu_1089_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar1_fu_1248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_87_fu_857_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_79_fu_867_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_80_fu_876_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_81_fu_885_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_82_fu_894_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_83_fu_903_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_84_fu_912_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_85_fu_921_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_86_fu_930_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_data_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_data_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_data_WREADY : STD_LOGIC := '0';
    signal ap_block_pp8_stage0_01001 : BOOLEAN;
    signal X_KK_a_3_fu_224 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_KK_a_3_1_fu_228 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_KK_a_3_2_fu_232 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_KK_a_3_3_fu_236 : STD_LOGIC_VECTOR (31 downto 0);
    signal roh_2_to_int_fu_1144_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal roh_babay_to_int_fu_1162_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_78_fu_1148_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_88_fu_1158_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_1186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_1180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_89_fu_1166_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_90_fu_1176_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs2_fu_1204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_fu_1198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_91_fu_1192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_92_fu_1210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_93_fu_1216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_94_fu_761_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_95_fu_1222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (79 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;
    signal ap_idle_pp6 : STD_LOGIC;
    signal ap_enable_pp6 : STD_LOGIC;
    signal ap_idle_pp7 : STD_LOGIC;
    signal ap_enable_pp7 : STD_LOGIC;
    signal ap_idle_pp8 : STD_LOGIC;
    signal ap_enable_pp8 : STD_LOGIC;

    component unconstrained IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        R_Hat_a_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        R_Hat_a_ce0 : OUT STD_LOGIC;
        R_Hat_a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        X_KK_a_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        X_KK_a_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        X_KK_a_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        X_KK_a_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        Y_Hat_a_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        Y_Hat_a_ce0 : OUT STD_LOGIC;
        Y_Hat_a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Y_Ref_KK_a_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        Y_Ref_KK_a_ce0 : OUT STD_LOGIC;
        Y_Ref_KK_a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        U_KK_a_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        U_KK_a_ce0 : OUT STD_LOGIC;
        U_KK_a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        V_Mul_H_Inv_a_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        V_Mul_H_Inv_a_ce0 : OUT STD_LOGIC;
        V_Mul_H_Inv_a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        unconstrained_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        unconstrained_r_ce0 : OUT STD_LOGIC;
        unconstrained_r_we0 : OUT STD_LOGIC;
        unconstrained_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        theta_kk_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        theta_kk_ce0 : OUT STD_LOGIC;
        theta_kk_we0 : OUT STD_LOGIC;
        theta_kk_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        theta_kk_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sph_dec IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        V_Gen_a_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        V_Gen_a_ce0 : OUT STD_LOGIC;
        V_Gen_a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        roh : IN STD_LOGIC_VECTOR (31 downto 0);
        U_unc_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        U_unc_ce0 : OUT STD_LOGIC;
        U_unc_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        U_opt_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        U_opt_ce0 : OUT STD_LOGIC;
        U_opt_we0 : OUT STD_LOGIC;
        U_opt_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guess_babay IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        V_Gen_a_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        V_Gen_a_ce0 : OUT STD_LOGIC;
        V_Gen_a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        H_Hat_Inv_a_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        H_Hat_Inv_a_ce0 : OUT STD_LOGIC;
        H_Hat_Inv_a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        U_unc_kk_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        U_unc_kk_ce0 : OUT STD_LOGIC;
        U_unc_kk_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        theta_kk_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        theta_kk_ce0 : OUT STD_LOGIC;
        theta_kk_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guess_edu IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        U_KK_a_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        U_KK_a_ce0 : OUT STD_LOGIC;
        U_KK_a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        V_Gen_a_cpy_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        V_Gen_a_cpy_ce0 : OUT STD_LOGIC;
        V_Gen_a_cpy_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        U_unc_kk_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        U_unc_kk_ce0 : OUT STD_LOGIC;
        U_unc_kk_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component predictive_controjbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component unconstrained_temp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component guess_edu_u_educaibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component predictive_controrcU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component predictive_controsc4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component predictive_controtde IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component predictive_controller_crtl_bus_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        X_KK_src : OUT STD_LOGIC_VECTOR (31 downto 0);
        Y_REF_KK_src : OUT STD_LOGIC_VECTOR (31 downto 0);
        U_KK_src : OUT STD_LOGIC_VECTOR (31 downto 0);
        Y_HAT_src : OUT STD_LOGIC_VECTOR (31 downto 0);
        R_HAT_src : OUT STD_LOGIC_VECTOR (31 downto 0);
        V_MUL_H_INV_src : OUT STD_LOGIC_VECTOR (31 downto 0);
        V_GEN_src : OUT STD_LOGIC_VECTOR (31 downto 0);
        H_HAT_INV_src : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_r : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component predictive_controller_data_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    predictive_controller_crtl_bus_s_axi_U : component predictive_controller_crtl_bus_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CRTL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CRTL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_crtl_bus_AWVALID,
        AWREADY => s_axi_crtl_bus_AWREADY,
        AWADDR => s_axi_crtl_bus_AWADDR,
        WVALID => s_axi_crtl_bus_WVALID,
        WREADY => s_axi_crtl_bus_WREADY,
        WDATA => s_axi_crtl_bus_WDATA,
        WSTRB => s_axi_crtl_bus_WSTRB,
        ARVALID => s_axi_crtl_bus_ARVALID,
        ARREADY => s_axi_crtl_bus_ARREADY,
        ARADDR => s_axi_crtl_bus_ARADDR,
        RVALID => s_axi_crtl_bus_RVALID,
        RREADY => s_axi_crtl_bus_RREADY,
        RDATA => s_axi_crtl_bus_RDATA,
        RRESP => s_axi_crtl_bus_RRESP,
        BVALID => s_axi_crtl_bus_BVALID,
        BREADY => s_axi_crtl_bus_BREADY,
        BRESP => s_axi_crtl_bus_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        X_KK_src => X_KK_src,
        Y_REF_KK_src => Y_REF_KK_src,
        U_KK_src => U_KK_src,
        Y_HAT_src => Y_HAT_src,
        R_HAT_src => R_HAT_src,
        V_MUL_H_INV_src => V_MUL_H_INV_src,
        V_GEN_src => V_GEN_src,
        H_HAT_INV_src => H_HAT_INV_src,
        out_r => out_r);

    predictive_controller_data_m_axi_U : component predictive_controller_data_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data_AWVALID,
        AWREADY => m_axi_data_AWREADY,
        AWADDR => m_axi_data_AWADDR,
        AWID => m_axi_data_AWID,
        AWLEN => m_axi_data_AWLEN,
        AWSIZE => m_axi_data_AWSIZE,
        AWBURST => m_axi_data_AWBURST,
        AWLOCK => m_axi_data_AWLOCK,
        AWCACHE => m_axi_data_AWCACHE,
        AWPROT => m_axi_data_AWPROT,
        AWQOS => m_axi_data_AWQOS,
        AWREGION => m_axi_data_AWREGION,
        AWUSER => m_axi_data_AWUSER,
        WVALID => m_axi_data_WVALID,
        WREADY => m_axi_data_WREADY,
        WDATA => m_axi_data_WDATA,
        WSTRB => m_axi_data_WSTRB,
        WLAST => m_axi_data_WLAST,
        WID => m_axi_data_WID,
        WUSER => m_axi_data_WUSER,
        ARVALID => m_axi_data_ARVALID,
        ARREADY => m_axi_data_ARREADY,
        ARADDR => m_axi_data_ARADDR,
        ARID => m_axi_data_ARID,
        ARLEN => m_axi_data_ARLEN,
        ARSIZE => m_axi_data_ARSIZE,
        ARBURST => m_axi_data_ARBURST,
        ARLOCK => m_axi_data_ARLOCK,
        ARCACHE => m_axi_data_ARCACHE,
        ARPROT => m_axi_data_ARPROT,
        ARQOS => m_axi_data_ARQOS,
        ARREGION => m_axi_data_ARREGION,
        ARUSER => m_axi_data_ARUSER,
        RVALID => m_axi_data_RVALID,
        RREADY => m_axi_data_RREADY,
        RDATA => m_axi_data_RDATA,
        RLAST => m_axi_data_RLAST,
        RID => m_axi_data_RID,
        RUSER => m_axi_data_RUSER,
        RRESP => m_axi_data_RRESP,
        BVALID => m_axi_data_BVALID,
        BREADY => m_axi_data_BREADY,
        BRESP => m_axi_data_BRESP,
        BID => m_axi_data_BID,
        BUSER => m_axi_data_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => data_ARVALID,
        I_ARREADY => data_ARREADY,
        I_ARADDR => data_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => data_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => data_RVALID,
        I_RREADY => data_RREADY,
        I_RDATA => data_RDATA,
        I_RID => data_RID,
        I_RUSER => data_RUSER,
        I_RRESP => data_RRESP,
        I_RLAST => data_RLAST,
        I_AWVALID => data_AWVALID,
        I_AWREADY => data_AWREADY,
        I_AWADDR => data_addr_reg_1328,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_C,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => data_WVALID,
        I_WREADY => data_WREADY,
        I_WDATA => U_opt_load_reg_1562,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => data_BVALID,
        I_BREADY => data_BREADY,
        I_BRESP => data_BRESP,
        I_BID => data_BID,
        I_BUSER => data_BUSER);

    Y_Ref_KK_a_U : component unconstrained_temp
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Y_Ref_KK_a_address0,
        ce0 => Y_Ref_KK_a_ce0,
        we0 => Y_Ref_KK_a_we0,
        d0 => data_addr_7_read_reg_1398,
        q0 => Y_Ref_KK_a_q0);

    U_KK_a_U : component guess_edu_u_educaibs
    generic map (
        DataWidth => 32,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => U_KK_a_address0,
        ce0 => U_KK_a_ce0,
        we0 => U_KK_a_we0,
        d0 => data_addr_6_read_reg_1412,
        q0 => U_KK_a_q0);

    Y_Hat_a_U : component predictive_controrcU
    generic map (
        DataWidth => 32,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Y_Hat_a_address0,
        ce0 => Y_Hat_a_ce0,
        we0 => Y_Hat_a_we0,
        d0 => data_addr_5_read_reg_1426,
        q0 => Y_Hat_a_q0);

    R_Hat_a_U : component predictive_controsc4
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => R_Hat_a_address0,
        ce0 => R_Hat_a_ce0,
        we0 => R_Hat_a_we0,
        d0 => data_addr_4_read_reg_1440,
        q0 => R_Hat_a_q0);

    V_Mul_H_Inv_a_U : component predictive_controtde
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => V_Mul_H_Inv_a_address0,
        ce0 => V_Mul_H_Inv_a_ce0,
        we0 => V_Mul_H_Inv_a_we0,
        d0 => data_addr_3_read_reg_1454,
        q0 => V_Mul_H_Inv_a_q0);

    V_Gen_a_U : component predictive_controtde
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => V_Gen_a_address0,
        ce0 => V_Gen_a_ce0,
        we0 => V_Gen_a_we0,
        d0 => data_addr_2_read_reg_1468,
        q0 => V_Gen_a_q0);

    V_Gen_a_cpy_U : component predictive_controtde
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => V_Gen_a_cpy_address0,
        ce0 => V_Gen_a_cpy_ce0,
        we0 => V_Gen_a_cpy_we0,
        d0 => V_Gen_a_q0,
        q0 => V_Gen_a_cpy_q0);

    H_Hat_Inv_a_U : component predictive_controtde
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => H_Hat_Inv_a_address0,
        ce0 => H_Hat_Inv_a_ce0,
        we0 => H_Hat_Inv_a_we0,
        d0 => data_addr_1_read_reg_1482,
        q0 => H_Hat_Inv_a_q0);

    U_unc_kk_U : component guess_edu_u_educaibs
    generic map (
        DataWidth => 32,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => U_unc_kk_address0,
        ce0 => U_unc_kk_ce0,
        we0 => U_unc_kk_we0,
        d0 => grp_unconstrained_fu_723_unconstrained_r_d0,
        q0 => U_unc_kk_q0);

    U_unc_kk_cpy_U : component guess_edu_u_educaibs
    generic map (
        DataWidth => 32,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => U_unc_kk_cpy_address0,
        ce0 => U_unc_kk_cpy_ce0,
        we0 => U_unc_kk_cpy_we0,
        d0 => U_unc_kk_q0,
        q0 => U_unc_kk_cpy_q0);

    theta_kk_U : component guess_edu_u_educaibs
    generic map (
        DataWidth => 32,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => theta_kk_address0,
        ce0 => theta_kk_ce0,
        we0 => theta_kk_we0,
        d0 => grp_unconstrained_fu_723_theta_kk_d0,
        q0 => theta_kk_q0);

    U_opt_U : component guess_edu_u_educaibs
    generic map (
        DataWidth => 32,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => U_opt_address0,
        ce0 => U_opt_ce0,
        we0 => U_opt_we0,
        d0 => grp_sph_dec_fu_738_U_opt_d0,
        q0 => U_opt_q0);

    grp_unconstrained_fu_723 : component unconstrained
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_unconstrained_fu_723_ap_start,
        ap_done => grp_unconstrained_fu_723_ap_done,
        ap_idle => grp_unconstrained_fu_723_ap_idle,
        ap_ready => grp_unconstrained_fu_723_ap_ready,
        R_Hat_a_address0 => grp_unconstrained_fu_723_R_Hat_a_address0,
        R_Hat_a_ce0 => grp_unconstrained_fu_723_R_Hat_a_ce0,
        R_Hat_a_q0 => R_Hat_a_q0,
        X_KK_a_0_read => X_KK_a_3_fu_224,
        X_KK_a_1_read => X_KK_a_3_1_fu_228,
        X_KK_a_2_read => X_KK_a_3_2_fu_232,
        X_KK_a_3_read => X_KK_a_3_3_fu_236,
        Y_Hat_a_address0 => grp_unconstrained_fu_723_Y_Hat_a_address0,
        Y_Hat_a_ce0 => grp_unconstrained_fu_723_Y_Hat_a_ce0,
        Y_Hat_a_q0 => Y_Hat_a_q0,
        Y_Ref_KK_a_address0 => grp_unconstrained_fu_723_Y_Ref_KK_a_address0,
        Y_Ref_KK_a_ce0 => grp_unconstrained_fu_723_Y_Ref_KK_a_ce0,
        Y_Ref_KK_a_q0 => Y_Ref_KK_a_q0,
        U_KK_a_address0 => grp_unconstrained_fu_723_U_KK_a_address0,
        U_KK_a_ce0 => grp_unconstrained_fu_723_U_KK_a_ce0,
        U_KK_a_q0 => U_KK_a_q0,
        V_Mul_H_Inv_a_address0 => grp_unconstrained_fu_723_V_Mul_H_Inv_a_address0,
        V_Mul_H_Inv_a_ce0 => grp_unconstrained_fu_723_V_Mul_H_Inv_a_ce0,
        V_Mul_H_Inv_a_q0 => V_Mul_H_Inv_a_q0,
        unconstrained_r_address0 => grp_unconstrained_fu_723_unconstrained_r_address0,
        unconstrained_r_ce0 => grp_unconstrained_fu_723_unconstrained_r_ce0,
        unconstrained_r_we0 => grp_unconstrained_fu_723_unconstrained_r_we0,
        unconstrained_r_d0 => grp_unconstrained_fu_723_unconstrained_r_d0,
        theta_kk_address0 => grp_unconstrained_fu_723_theta_kk_address0,
        theta_kk_ce0 => grp_unconstrained_fu_723_theta_kk_ce0,
        theta_kk_we0 => grp_unconstrained_fu_723_theta_kk_we0,
        theta_kk_d0 => grp_unconstrained_fu_723_theta_kk_d0,
        theta_kk_q0 => theta_kk_q0);

    grp_sph_dec_fu_738 : component sph_dec
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sph_dec_fu_738_ap_start,
        ap_done => grp_sph_dec_fu_738_ap_done,
        ap_idle => grp_sph_dec_fu_738_ap_idle,
        ap_ready => grp_sph_dec_fu_738_ap_ready,
        V_Gen_a_address0 => grp_sph_dec_fu_738_V_Gen_a_address0,
        V_Gen_a_ce0 => grp_sph_dec_fu_738_V_Gen_a_ce0,
        V_Gen_a_q0 => V_Gen_a_q0,
        roh => roh_1_reg_1543,
        U_unc_address0 => grp_sph_dec_fu_738_U_unc_address0,
        U_unc_ce0 => grp_sph_dec_fu_738_U_unc_ce0,
        U_unc_q0 => U_unc_kk_q0,
        U_opt_address0 => grp_sph_dec_fu_738_U_opt_address0,
        U_opt_ce0 => grp_sph_dec_fu_738_U_opt_ce0,
        U_opt_we0 => grp_sph_dec_fu_738_U_opt_we0,
        U_opt_d0 => grp_sph_dec_fu_738_U_opt_d0);

    grp_guess_babay_fu_746 : component guess_babay
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_guess_babay_fu_746_ap_start,
        ap_done => grp_guess_babay_fu_746_ap_done,
        ap_idle => grp_guess_babay_fu_746_ap_idle,
        ap_ready => grp_guess_babay_fu_746_ap_ready,
        V_Gen_a_address0 => grp_guess_babay_fu_746_V_Gen_a_address0,
        V_Gen_a_ce0 => grp_guess_babay_fu_746_V_Gen_a_ce0,
        V_Gen_a_q0 => V_Gen_a_q0,
        H_Hat_Inv_a_address0 => grp_guess_babay_fu_746_H_Hat_Inv_a_address0,
        H_Hat_Inv_a_ce0 => grp_guess_babay_fu_746_H_Hat_Inv_a_ce0,
        H_Hat_Inv_a_q0 => H_Hat_Inv_a_q0,
        U_unc_kk_address0 => grp_guess_babay_fu_746_U_unc_kk_address0,
        U_unc_kk_ce0 => grp_guess_babay_fu_746_U_unc_kk_ce0,
        U_unc_kk_q0 => U_unc_kk_q0,
        theta_kk_address0 => grp_guess_babay_fu_746_theta_kk_address0,
        theta_kk_ce0 => grp_guess_babay_fu_746_theta_kk_ce0,
        theta_kk_q0 => theta_kk_q0,
        ap_return => grp_guess_babay_fu_746_ap_return);

    grp_guess_edu_fu_754 : component guess_edu
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_guess_edu_fu_754_ap_start,
        ap_done => grp_guess_edu_fu_754_ap_done,
        ap_idle => grp_guess_edu_fu_754_ap_idle,
        ap_ready => grp_guess_edu_fu_754_ap_ready,
        U_KK_a_address0 => grp_guess_edu_fu_754_U_KK_a_address0,
        U_KK_a_ce0 => grp_guess_edu_fu_754_U_KK_a_ce0,
        U_KK_a_q0 => U_KK_a_q0,
        V_Gen_a_cpy_address0 => grp_guess_edu_fu_754_V_Gen_a_cpy_address0,
        V_Gen_a_cpy_ce0 => grp_guess_edu_fu_754_V_Gen_a_cpy_ce0,
        V_Gen_a_cpy_q0 => V_Gen_a_cpy_q0,
        U_unc_kk_address0 => grp_guess_edu_fu_754_U_unc_kk_address0,
        U_unc_kk_ce0 => grp_guess_edu_fu_754_U_unc_kk_ce0,
        U_unc_kk_q0 => U_unc_kk_cpy_q0,
        ap_return => grp_guess_edu_fu_754_ap_return);

    predictive_controjbC_U63 : component predictive_controjbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_guess_edu_fu_754_ap_return,
        din1 => grp_guess_babay_fu_746_ap_return,
        opcode => ap_const_lv5_4,
        dout => tmp_94_fu_761_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state18) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state18)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state18);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state28) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state28)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state28);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state38) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state38)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state38);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state48) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state48)) then 
                        ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state48);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                    ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp5_exit_iter0_state58) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp5_exit_iter0_state58)) then 
                        ap_enable_reg_pp5_iter1 <= (ap_const_logic_1 xor ap_condition_pp5_exit_iter0_state58);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
                    ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp6_exit_iter0_state68) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp6_exit_iter0_state68)) then 
                        ap_enable_reg_pp6_iter1 <= (ap_const_logic_1 xor ap_condition_pp6_exit_iter0_state68);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
                    ap_enable_reg_pp6_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp7_exit_iter0_state78) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp7_exit_iter0_state78)) then 
                        ap_enable_reg_pp7_iter1 <= (ap_const_logic_1 xor ap_condition_pp7_exit_iter0_state78);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter2 <= ap_enable_reg_pp7_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                    ap_enable_reg_pp7_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp8_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp8_exit_iter0_state90) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0))) then 
                    ap_enable_reg_pp8_iter0 <= ap_const_logic_0;
                elsif ((not(((grp_sph_dec_fu_738_ap_done = ap_const_logic_0) or (ap_sig_ioackin_data_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state89))) then 
                    ap_enable_reg_pp8_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp8_exit_iter0_state90)) then 
                        ap_enable_reg_pp8_iter1 <= (ap_const_logic_1 xor ap_condition_pp8_exit_iter0_state90);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp8_iter1 <= ap_enable_reg_pp8_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then 
                    ap_enable_reg_pp8_iter2 <= ap_enable_reg_pp8_iter1;
                elsif ((not(((grp_sph_dec_fu_738_ap_done = ap_const_logic_0) or (ap_sig_ioackin_data_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state89))) then 
                    ap_enable_reg_pp8_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_data_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_data_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_sig_ioackin_data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_sig_ioackin_data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_sig_ioackin_data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((ap_sig_ioackin_data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((ap_sig_ioackin_data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((ap_sig_ioackin_data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((ap_sig_ioackin_data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state61)) or ((ap_sig_ioackin_data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state71)))) then 
                    ap_reg_ioackin_data_ARREADY <= ap_const_logic_0;
                elsif ((((data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state61)) or ((data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state71)))) then 
                    ap_reg_ioackin_data_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_data_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_data_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state89)) then
                    if (not(((grp_sph_dec_fu_738_ap_done = ap_const_logic_0) or (ap_sig_ioackin_data_AWREADY = ap_const_logic_0)))) then 
                        ap_reg_ioackin_data_AWREADY <= ap_const_logic_0;
                    elsif (((grp_sph_dec_fu_738_ap_done = ap_const_logic_1) and (data_AWREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_data_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_data_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_data_WREADY <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp8_iter2 = ap_const_logic_1) and (exitcond10_reg_1548_pp8_iter1_reg = ap_const_lv1_0))) then
                    if ((ap_const_boolean_0 = ap_block_pp8_stage0_11001)) then 
                        ap_reg_ioackin_data_WREADY <= ap_const_logic_0;
                    elsif (((data_WREADY = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_01001))) then 
                        ap_reg_ioackin_data_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    grp_guess_babay_fu_746_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_guess_babay_fu_746_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond_fu_1127_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state85))) then 
                    grp_guess_babay_fu_746_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_guess_babay_fu_746_ap_ready = ap_const_logic_1)) then 
                    grp_guess_babay_fu_746_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_guess_edu_fu_754_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_guess_edu_fu_754_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond_fu_1127_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state85))) then 
                    grp_guess_edu_fu_754_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_guess_edu_fu_754_ap_ready = ap_const_logic_1)) then 
                    grp_guess_edu_fu_754_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sph_dec_fu_738_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_sph_dec_fu_738_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
                    grp_sph_dec_fu_738_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sph_dec_fu_738_ap_ready = ap_const_logic_1)) then 
                    grp_sph_dec_fu_738_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_unconstrained_fu_723_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_unconstrained_fu_723_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
                    grp_unconstrained_fu_723_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_unconstrained_fu_723_ap_ready = ap_const_logic_1)) then 
                    grp_unconstrained_fu_723_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_reg_712_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (exitcond10_fu_1236_p2 = ap_const_lv1_0))) then 
                indvar_reg_712 <= indvar_next_fu_1242_p2;
            elsif ((not(((grp_sph_dec_fu_738_ap_done = ap_const_logic_0) or (ap_sig_ioackin_data_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state89))) then 
                indvar_reg_712 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    row1_reg_606_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                row1_reg_606 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond8_reg_1389 = ap_const_lv1_0))) then 
                row1_reg_606 <= row_5_reg_1393;
            end if; 
        end if;
    end process;

    row2_reg_618_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                row2_reg_618 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (exitcond7_reg_1403 = ap_const_lv1_0))) then 
                row2_reg_618 <= row_6_reg_1407;
            end if; 
        end if;
    end process;

    row3_reg_630_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                row3_reg_630 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (exitcond6_reg_1417 = ap_const_lv1_0))) then 
                row3_reg_630 <= row_7_reg_1421;
            end if; 
        end if;
    end process;

    row4_reg_642_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                row4_reg_642 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (exitcond5_reg_1431 = ap_const_lv1_0))) then 
                row4_reg_642 <= row_8_reg_1435;
            end if; 
        end if;
    end process;

    row5_reg_654_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
                row5_reg_654 <= ap_const_lv8_0;
            elsif (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (exitcond4_reg_1445 = ap_const_lv1_0))) then 
                row5_reg_654 <= row_9_reg_1449;
            end if; 
        end if;
    end process;

    row6_reg_666_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
                row6_reg_666 <= ap_const_lv8_0;
            elsif (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (exitcond3_reg_1459 = ap_const_lv1_0))) then 
                row6_reg_666 <= row_10_reg_1463;
            end if; 
        end if;
    end process;

    row7_reg_678_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                row7_reg_678 <= ap_const_lv8_0;
            elsif (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (exitcond2_reg_1473 = ap_const_lv1_0))) then 
                row7_reg_678 <= row_11_reg_1477;
            end if; 
        end if;
    end process;

    row8_reg_690_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
                row8_reg_690 <= row_12_reg_1510;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state82) and (grp_unconstrained_fu_723_ap_done = ap_const_logic_1))) then 
                row8_reg_690 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    row9_reg_701_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1110_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state83))) then 
                row9_reg_701 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
                row9_reg_701 <= row_13_reg_1528;
            end if; 
        end if;
    end process;

    row_reg_595_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond9_fu_939_p2 = ap_const_lv1_0))) then 
                row_reg_595 <= row_4_fu_945_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                row_reg_595 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                H_HAT_INV_src1_reg_1282 <= H_HAT_INV_src(31 downto 2);
                R_HAT_src9_reg_1297 <= R_HAT_src(31 downto 2);
                U_KK_src5_reg_1307 <= U_KK_src(31 downto 2);
                V_GEN_src1_reg_1287 <= V_GEN_src(31 downto 2);
                V_MUL_H_INV_src1_reg_1292 <= V_MUL_H_INV_src(31 downto 2);
                X_KK_src1_reg_1317 <= X_KK_src(31 downto 2);
                Y_HAT_src7_reg_1302 <= Y_HAT_src(31 downto 2);
                Y_REF_KK_src3_reg_1312 <= Y_REF_KK_src(31 downto 2);
                out1_reg_1277 <= out_r(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (exitcond10_reg_1548 = ap_const_lv1_0))) then
                U_opt_load_reg_1562 <= U_opt_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_1385 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                X_KK_a_3_1_fu_228 <= data_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_1385 = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                X_KK_a_3_2_fu_232 <= data_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_1385 = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                X_KK_a_3_3_fu_236 <= data_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_1385 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                X_KK_a_3_fu_224 <= data_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (exitcond2_reg_1473 = ap_const_lv1_0))) then
                data_addr_1_read_reg_1482 <= data_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                    data_addr_1_reg_1334(29 downto 0) <= tmp_80_fu_876_p1(32 - 1 downto 0)(29 downto 0);
                    data_addr_2_reg_1340(29 downto 0) <= tmp_81_fu_885_p1(32 - 1 downto 0)(29 downto 0);
                    data_addr_3_reg_1346(29 downto 0) <= tmp_82_fu_894_p1(32 - 1 downto 0)(29 downto 0);
                    data_addr_4_reg_1352(29 downto 0) <= tmp_83_fu_903_p1(32 - 1 downto 0)(29 downto 0);
                    data_addr_5_reg_1358(29 downto 0) <= tmp_84_fu_912_p1(32 - 1 downto 0)(29 downto 0);
                    data_addr_6_reg_1364(29 downto 0) <= tmp_85_fu_921_p1(32 - 1 downto 0)(29 downto 0);
                    data_addr_7_reg_1370(29 downto 0) <= tmp_86_fu_930_p1(32 - 1 downto 0)(29 downto 0);
                    data_addr_reg_1328(29 downto 0) <= tmp_79_fu_867_p1(32 - 1 downto 0)(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (exitcond3_reg_1459 = ap_const_lv1_0))) then
                data_addr_2_read_reg_1468 <= data_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (exitcond4_reg_1445 = ap_const_lv1_0))) then
                data_addr_3_read_reg_1454 <= data_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (exitcond5_reg_1431 = ap_const_lv1_0))) then
                data_addr_4_read_reg_1440 <= data_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (exitcond6_reg_1417 = ap_const_lv1_0))) then
                data_addr_5_read_reg_1426 <= data_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (exitcond7_reg_1403 = ap_const_lv1_0))) then
                data_addr_6_read_reg_1412 <= data_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond8_reg_1389 = ap_const_lv1_0))) then
                data_addr_7_read_reg_1398 <= data_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0))) then
                exitcond10_reg_1548 <= exitcond10_fu_1236_p2;
                exitcond10_reg_1548_pp8_iter1_reg <= exitcond10_reg_1548;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                exitcond2_reg_1473 <= exitcond2_fu_1077_p2;
                exitcond2_reg_1473_pp7_iter1_reg <= exitcond2_reg_1473;
                row7_reg_678_pp7_iter1_reg <= row7_reg_678;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                exitcond3_reg_1459 <= exitcond3_fu_1060_p2;
                exitcond3_reg_1459_pp6_iter1_reg <= exitcond3_reg_1459;
                row6_reg_666_pp6_iter1_reg <= row6_reg_666;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                exitcond4_reg_1445 <= exitcond4_fu_1043_p2;
                exitcond4_reg_1445_pp5_iter1_reg <= exitcond4_reg_1445;
                row5_reg_654_pp5_iter1_reg <= row5_reg_654;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                exitcond5_reg_1431 <= exitcond5_fu_1026_p2;
                exitcond5_reg_1431_pp4_iter1_reg <= exitcond5_reg_1431;
                row4_reg_642_pp4_iter1_reg <= row4_reg_642;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                exitcond6_reg_1417 <= exitcond6_fu_1009_p2;
                exitcond6_reg_1417_pp3_iter1_reg <= exitcond6_reg_1417;
                row3_reg_630_pp3_iter1_reg <= row3_reg_630;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                exitcond7_reg_1403 <= exitcond7_fu_992_p2;
                exitcond7_reg_1403_pp2_iter1_reg <= exitcond7_reg_1403;
                row2_reg_618_pp2_iter1_reg <= row2_reg_618;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond8_reg_1389 <= exitcond8_fu_975_p2;
                exitcond8_reg_1389_pp1_iter1_reg <= exitcond8_reg_1389;
                row1_reg_606_pp1_iter1_reg <= row1_reg_606;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state87_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state87))) then
                roh_1_reg_1543 <= roh_1_fu_1228_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                row_10_reg_1463 <= row_10_fu_1066_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                row_11_reg_1477 <= row_11_fu_1083_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state83)) then
                row_12_reg_1510 <= row_12_fu_1116_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state85)) then
                row_13_reg_1528 <= row_13_fu_1133_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                row_5_reg_1393 <= row_5_fu_981_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                row_6_reg_1407 <= row_6_fu_998_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                row_7_reg_1421 <= row_7_fu_1015_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                row_8_reg_1435 <= row_8_fu_1032_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                row_9_reg_1449 <= row_9_fu_1049_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state83) and (exitcond1_fu_1110_p2 = ap_const_lv1_0))) then
                    tmp_68_reg_1515(3 downto 0) <= tmp_68_fu_1122_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state85) and (exitcond_fu_1127_p2 = ap_const_lv1_0))) then
                    tmp_70_reg_1533(7 downto 0) <= tmp_70_fu_1139_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond9_fu_939_p2 = ap_const_lv1_0))) then
                tmp_reg_1385 <= tmp_fu_951_p1;
            end if;
        end if;
    end process;
    data_addr_reg_1328(31 downto 30) <= "00";
    data_addr_1_reg_1334(31 downto 30) <= "00";
    data_addr_2_reg_1340(31 downto 30) <= "00";
    data_addr_3_reg_1346(31 downto 30) <= "00";
    data_addr_4_reg_1352(31 downto 30) <= "00";
    data_addr_5_reg_1358(31 downto 30) <= "00";
    data_addr_6_reg_1364(31 downto 30) <= "00";
    data_addr_7_reg_1370(31 downto 30) <= "00";
    tmp_68_reg_1515(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    tmp_70_reg_1533(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state89, ap_enable_reg_pp8_iter2, ap_CS_fsm_state97, ap_CS_fsm_state71, ap_enable_reg_pp7_iter1, ap_CS_fsm_state61, ap_enable_reg_pp6_iter1, ap_CS_fsm_state51, ap_enable_reg_pp5_iter1, ap_CS_fsm_state41, ap_enable_reg_pp4_iter1, ap_CS_fsm_state31, ap_enable_reg_pp3_iter1, ap_CS_fsm_state21, ap_enable_reg_pp2_iter1, ap_CS_fsm_state11, ap_enable_reg_pp1_iter1, ap_CS_fsm_state2, data_BVALID, ap_sig_ioackin_data_ARREADY, exitcond9_fu_939_p2, ap_enable_reg_pp0_iter0, exitcond8_fu_975_p2, ap_enable_reg_pp1_iter0, exitcond7_fu_992_p2, ap_enable_reg_pp2_iter0, exitcond6_fu_1009_p2, ap_enable_reg_pp3_iter0, exitcond5_fu_1026_p2, ap_enable_reg_pp4_iter0, exitcond4_fu_1043_p2, ap_enable_reg_pp5_iter0, exitcond3_fu_1060_p2, ap_enable_reg_pp6_iter0, exitcond2_fu_1077_p2, ap_enable_reg_pp7_iter0, ap_CS_fsm_state83, exitcond1_fu_1110_p2, ap_CS_fsm_state85, exitcond_fu_1127_p2, ap_CS_fsm_state87, ap_block_state87_on_subcall_done, exitcond10_fu_1236_p2, ap_enable_reg_pp8_iter0, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter2, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter2, ap_block_pp4_stage0_subdone, ap_enable_reg_pp4_iter2, ap_block_pp5_stage0_subdone, ap_enable_reg_pp5_iter2, ap_block_pp6_stage0_subdone, ap_enable_reg_pp6_iter2, ap_block_pp7_stage0_subdone, ap_enable_reg_pp7_iter2, ap_sig_ioackin_data_AWREADY, grp_sph_dec_fu_738_ap_done, ap_block_pp8_stage0_subdone, ap_enable_reg_pp8_iter1, grp_unconstrained_fu_723_ap_done, ap_CS_fsm_state82)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_sig_ioackin_data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond9_fu_939_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond9_fu_939_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_sig_ioackin_data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (exitcond8_fu_975_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (exitcond8_fu_975_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state21 => 
                if (((ap_sig_ioackin_data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (exitcond7_fu_992_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (exitcond7_fu_992_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state31 => 
                if (((ap_sig_ioackin_data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (exitcond6_fu_1009_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (exitcond6_fu_1009_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state41 => 
                if (((ap_sig_ioackin_data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (exitcond5_fu_1026_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (exitcond5_fu_1026_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state51 => 
                if (((ap_sig_ioackin_data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
            when ap_ST_fsm_pp5_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (exitcond4_fu_1043_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (exitcond4_fu_1043_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state61 => 
                if (((ap_sig_ioackin_data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_state61;
                end if;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
            when ap_ST_fsm_pp6_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (exitcond3_fu_1060_p2 = ap_const_lv1_1) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (exitcond3_fu_1060_p2 = ap_const_lv1_1) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                end if;
            when ap_ST_fsm_state71 => 
                if (((ap_sig_ioackin_data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                    ap_NS_fsm <= ap_ST_fsm_state72;
                else
                    ap_NS_fsm <= ap_ST_fsm_state71;
                end if;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
            when ap_ST_fsm_pp7_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (exitcond2_fu_1077_p2 = ap_const_lv1_1) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_enable_reg_pp7_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (ap_enable_reg_pp7_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (ap_enable_reg_pp7_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (exitcond2_fu_1077_p2 = ap_const_lv1_1) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_enable_reg_pp7_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                end if;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state82) and (grp_unconstrained_fu_723_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_state82;
                end if;
            when ap_ST_fsm_state83 => 
                if (((exitcond1_fu_1110_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state83))) then
                    ap_NS_fsm <= ap_ST_fsm_state85;
                else
                    ap_NS_fsm <= ap_ST_fsm_state84;
                end if;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state85 => 
                if (((exitcond_fu_1127_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state85))) then
                    ap_NS_fsm <= ap_ST_fsm_state87;
                else
                    ap_NS_fsm <= ap_ST_fsm_state86;
                end if;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state87 => 
                if (((ap_const_boolean_0 = ap_block_state87_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state87))) then
                    ap_NS_fsm <= ap_ST_fsm_state88;
                else
                    ap_NS_fsm <= ap_ST_fsm_state87;
                end if;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                if ((not(((grp_sph_dec_fu_738_ap_done = ap_const_logic_0) or (ap_sig_ioackin_data_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state89))) then
                    ap_NS_fsm <= ap_ST_fsm_pp8_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state89;
                end if;
            when ap_ST_fsm_pp8_stage0 => 
                if ((not(((ap_enable_reg_pp8_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone) and (exitcond10_fu_1236_p2 = ap_const_lv1_1) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp8_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp8_stage0;
                elsif ((((ap_enable_reg_pp8_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone) and (exitcond10_fu_1236_p2 = ap_const_lv1_1) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp8_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state93;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp8_stage0;
                end if;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                if (((data_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state97))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state97;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    H_Hat_Inv_a_address0_assign_proc : process(ap_block_pp7_stage0, ap_CS_fsm_state87, ap_enable_reg_pp7_iter2, grp_guess_babay_fu_746_H_Hat_Inv_a_address0, tmp_67_fu_1089_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1))) then 
            H_Hat_Inv_a_address0 <= tmp_67_fu_1089_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            H_Hat_Inv_a_address0 <= grp_guess_babay_fu_746_H_Hat_Inv_a_address0;
        else 
            H_Hat_Inv_a_address0 <= "XXXXXXXX";
        end if; 
    end process;


    H_Hat_Inv_a_ce0_assign_proc : process(ap_block_pp7_stage0_11001, ap_CS_fsm_state87, ap_enable_reg_pp7_iter2, grp_guess_babay_fu_746_H_Hat_Inv_a_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1))) then 
            H_Hat_Inv_a_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            H_Hat_Inv_a_ce0 <= grp_guess_babay_fu_746_H_Hat_Inv_a_ce0;
        else 
            H_Hat_Inv_a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    H_Hat_Inv_a_we0_assign_proc : process(ap_block_pp7_stage0_11001, exitcond2_reg_1473_pp7_iter1_reg, ap_enable_reg_pp7_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (exitcond2_reg_1473_pp7_iter1_reg = ap_const_lv1_0))) then 
            H_Hat_Inv_a_we0 <= ap_const_logic_1;
        else 
            H_Hat_Inv_a_we0 <= ap_const_logic_0;
        end if; 
    end process;


    R_Hat_a_address0_assign_proc : process(ap_block_pp4_stage0, ap_enable_reg_pp4_iter2, grp_unconstrained_fu_723_R_Hat_a_address0, ap_CS_fsm_state82, tmp_64_fu_1038_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1))) then 
            R_Hat_a_address0 <= tmp_64_fu_1038_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            R_Hat_a_address0 <= grp_unconstrained_fu_723_R_Hat_a_address0;
        else 
            R_Hat_a_address0 <= "XXXXX";
        end if; 
    end process;


    R_Hat_a_ce0_assign_proc : process(ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter2, grp_unconstrained_fu_723_R_Hat_a_ce0, ap_CS_fsm_state82)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1))) then 
            R_Hat_a_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            R_Hat_a_ce0 <= grp_unconstrained_fu_723_R_Hat_a_ce0;
        else 
            R_Hat_a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    R_Hat_a_we0_assign_proc : process(ap_block_pp4_stage0_11001, exitcond5_reg_1431_pp4_iter1_reg, ap_enable_reg_pp4_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (exitcond5_reg_1431_pp4_iter1_reg = ap_const_lv1_0))) then 
            R_Hat_a_we0 <= ap_const_logic_1;
        else 
            R_Hat_a_we0 <= ap_const_logic_0;
        end if; 
    end process;


    U_KK_a_address0_assign_proc : process(ap_block_pp2_stage0, ap_CS_fsm_state87, ap_enable_reg_pp2_iter2, grp_unconstrained_fu_723_U_KK_a_address0, grp_guess_edu_fu_754_U_KK_a_address0, ap_CS_fsm_state82, tmp_62_fu_1004_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            U_KK_a_address0 <= tmp_62_fu_1004_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            U_KK_a_address0 <= grp_guess_edu_fu_754_U_KK_a_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            U_KK_a_address0 <= grp_unconstrained_fu_723_U_KK_a_address0;
        else 
            U_KK_a_address0 <= "XXXX";
        end if; 
    end process;


    U_KK_a_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_state87, ap_enable_reg_pp2_iter2, grp_unconstrained_fu_723_U_KK_a_ce0, grp_guess_edu_fu_754_U_KK_a_ce0, ap_CS_fsm_state82)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            U_KK_a_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            U_KK_a_ce0 <= grp_guess_edu_fu_754_U_KK_a_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            U_KK_a_ce0 <= grp_unconstrained_fu_723_U_KK_a_ce0;
        else 
            U_KK_a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    U_KK_a_we0_assign_proc : process(ap_block_pp2_stage0_11001, exitcond7_reg_1403_pp2_iter1_reg, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (exitcond7_reg_1403_pp2_iter1_reg = ap_const_lv1_0))) then 
            U_KK_a_we0 <= ap_const_logic_1;
        else 
            U_KK_a_we0 <= ap_const_logic_0;
        end if; 
    end process;


    U_opt_address0_assign_proc : process(ap_CS_fsm_state89, ap_block_pp8_stage0, ap_CS_fsm_pp8_stage0, ap_enable_reg_pp8_iter0, grp_sph_dec_fu_738_U_opt_address0, indvar1_fu_1248_p1)
    begin
        if (((ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_boolean_0 = ap_block_pp8_stage0))) then 
            U_opt_address0 <= indvar1_fu_1248_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            U_opt_address0 <= grp_sph_dec_fu_738_U_opt_address0;
        else 
            U_opt_address0 <= "XXXX";
        end if; 
    end process;


    U_opt_ce0_assign_proc : process(ap_CS_fsm_state89, ap_CS_fsm_pp8_stage0, ap_block_pp8_stage0_11001, ap_enable_reg_pp8_iter0, grp_sph_dec_fu_738_U_opt_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0))) then 
            U_opt_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            U_opt_ce0 <= grp_sph_dec_fu_738_U_opt_ce0;
        else 
            U_opt_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    U_opt_we0_assign_proc : process(ap_CS_fsm_state89, grp_sph_dec_fu_738_U_opt_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            U_opt_we0 <= grp_sph_dec_fu_738_U_opt_we0;
        else 
            U_opt_we0 <= ap_const_logic_0;
        end if; 
    end process;


    U_unc_kk_address0_assign_proc : process(ap_CS_fsm_state89, ap_CS_fsm_state83, tmp_68_fu_1122_p1, ap_CS_fsm_state87, grp_unconstrained_fu_723_unconstrained_r_address0, grp_sph_dec_fu_738_U_unc_address0, grp_guess_babay_fu_746_U_unc_kk_address0, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            U_unc_kk_address0 <= tmp_68_fu_1122_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            U_unc_kk_address0 <= grp_guess_babay_fu_746_U_unc_kk_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            U_unc_kk_address0 <= grp_sph_dec_fu_738_U_unc_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            U_unc_kk_address0 <= grp_unconstrained_fu_723_unconstrained_r_address0;
        else 
            U_unc_kk_address0 <= "XXXX";
        end if; 
    end process;


    U_unc_kk_ce0_assign_proc : process(ap_CS_fsm_state89, ap_CS_fsm_state83, ap_CS_fsm_state87, grp_unconstrained_fu_723_unconstrained_r_ce0, grp_sph_dec_fu_738_U_unc_ce0, grp_guess_babay_fu_746_U_unc_kk_ce0, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            U_unc_kk_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            U_unc_kk_ce0 <= grp_guess_babay_fu_746_U_unc_kk_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            U_unc_kk_ce0 <= grp_sph_dec_fu_738_U_unc_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            U_unc_kk_ce0 <= grp_unconstrained_fu_723_unconstrained_r_ce0;
        else 
            U_unc_kk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    U_unc_kk_cpy_address0_assign_proc : process(tmp_68_reg_1515, ap_CS_fsm_state87, grp_guess_edu_fu_754_U_unc_kk_address0, ap_CS_fsm_state84)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            U_unc_kk_cpy_address0 <= tmp_68_reg_1515(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            U_unc_kk_cpy_address0 <= grp_guess_edu_fu_754_U_unc_kk_address0;
        else 
            U_unc_kk_cpy_address0 <= "XXXX";
        end if; 
    end process;


    U_unc_kk_cpy_ce0_assign_proc : process(ap_CS_fsm_state87, grp_guess_edu_fu_754_U_unc_kk_ce0, ap_CS_fsm_state84)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            U_unc_kk_cpy_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            U_unc_kk_cpy_ce0 <= grp_guess_edu_fu_754_U_unc_kk_ce0;
        else 
            U_unc_kk_cpy_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    U_unc_kk_cpy_we0_assign_proc : process(ap_CS_fsm_state84)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            U_unc_kk_cpy_we0 <= ap_const_logic_1;
        else 
            U_unc_kk_cpy_we0 <= ap_const_logic_0;
        end if; 
    end process;


    U_unc_kk_we0_assign_proc : process(grp_unconstrained_fu_723_unconstrained_r_we0, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            U_unc_kk_we0 <= grp_unconstrained_fu_723_unconstrained_r_we0;
        else 
            U_unc_kk_we0 <= ap_const_logic_0;
        end if; 
    end process;


    V_Gen_a_address0_assign_proc : process(ap_CS_fsm_state89, ap_block_pp6_stage0, ap_CS_fsm_state85, tmp_70_fu_1139_p1, exitcond_fu_1127_p2, ap_CS_fsm_state87, ap_enable_reg_pp6_iter2, grp_sph_dec_fu_738_V_Gen_a_address0, grp_guess_babay_fu_746_V_Gen_a_address0, tmp_66_fu_1072_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state85) and (exitcond_fu_1127_p2 = ap_const_lv1_0))) then 
            V_Gen_a_address0 <= tmp_70_fu_1139_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1))) then 
            V_Gen_a_address0 <= tmp_66_fu_1072_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            V_Gen_a_address0 <= grp_guess_babay_fu_746_V_Gen_a_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            V_Gen_a_address0 <= grp_sph_dec_fu_738_V_Gen_a_address0;
        else 
            V_Gen_a_address0 <= "XXXXXXXX";
        end if; 
    end process;


    V_Gen_a_ce0_assign_proc : process(ap_CS_fsm_state89, ap_block_pp6_stage0_11001, ap_CS_fsm_state85, exitcond_fu_1127_p2, ap_CS_fsm_state87, ap_enable_reg_pp6_iter2, grp_sph_dec_fu_738_V_Gen_a_ce0, grp_guess_babay_fu_746_V_Gen_a_ce0)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state85) and (exitcond_fu_1127_p2 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1)))) then 
            V_Gen_a_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            V_Gen_a_ce0 <= grp_guess_babay_fu_746_V_Gen_a_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            V_Gen_a_ce0 <= grp_sph_dec_fu_738_V_Gen_a_ce0;
        else 
            V_Gen_a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    V_Gen_a_cpy_address0_assign_proc : process(tmp_70_reg_1533, ap_CS_fsm_state87, grp_guess_edu_fu_754_V_Gen_a_cpy_address0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            V_Gen_a_cpy_address0 <= tmp_70_reg_1533(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            V_Gen_a_cpy_address0 <= grp_guess_edu_fu_754_V_Gen_a_cpy_address0;
        else 
            V_Gen_a_cpy_address0 <= "XXXXXXXX";
        end if; 
    end process;


    V_Gen_a_cpy_ce0_assign_proc : process(ap_CS_fsm_state87, grp_guess_edu_fu_754_V_Gen_a_cpy_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            V_Gen_a_cpy_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            V_Gen_a_cpy_ce0 <= grp_guess_edu_fu_754_V_Gen_a_cpy_ce0;
        else 
            V_Gen_a_cpy_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    V_Gen_a_cpy_we0_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            V_Gen_a_cpy_we0 <= ap_const_logic_1;
        else 
            V_Gen_a_cpy_we0 <= ap_const_logic_0;
        end if; 
    end process;


    V_Gen_a_we0_assign_proc : process(ap_block_pp6_stage0_11001, exitcond3_reg_1459_pp6_iter1_reg, ap_enable_reg_pp6_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (exitcond3_reg_1459_pp6_iter1_reg = ap_const_lv1_0))) then 
            V_Gen_a_we0 <= ap_const_logic_1;
        else 
            V_Gen_a_we0 <= ap_const_logic_0;
        end if; 
    end process;


    V_Mul_H_Inv_a_address0_assign_proc : process(ap_block_pp5_stage0, ap_enable_reg_pp5_iter2, grp_unconstrained_fu_723_V_Mul_H_Inv_a_address0, ap_CS_fsm_state82, tmp_65_fu_1055_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1))) then 
            V_Mul_H_Inv_a_address0 <= tmp_65_fu_1055_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            V_Mul_H_Inv_a_address0 <= grp_unconstrained_fu_723_V_Mul_H_Inv_a_address0;
        else 
            V_Mul_H_Inv_a_address0 <= "XXXXXXXX";
        end if; 
    end process;


    V_Mul_H_Inv_a_ce0_assign_proc : process(ap_block_pp5_stage0_11001, ap_enable_reg_pp5_iter2, grp_unconstrained_fu_723_V_Mul_H_Inv_a_ce0, ap_CS_fsm_state82)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1))) then 
            V_Mul_H_Inv_a_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            V_Mul_H_Inv_a_ce0 <= grp_unconstrained_fu_723_V_Mul_H_Inv_a_ce0;
        else 
            V_Mul_H_Inv_a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    V_Mul_H_Inv_a_we0_assign_proc : process(ap_block_pp5_stage0_11001, exitcond4_reg_1445_pp5_iter1_reg, ap_enable_reg_pp5_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (exitcond4_reg_1445_pp5_iter1_reg = ap_const_lv1_0))) then 
            V_Mul_H_Inv_a_we0 <= ap_const_logic_1;
        else 
            V_Mul_H_Inv_a_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Y_Hat_a_address0_assign_proc : process(ap_block_pp3_stage0, ap_enable_reg_pp3_iter2, grp_unconstrained_fu_723_Y_Hat_a_address0, ap_CS_fsm_state82, tmp_63_fu_1021_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            Y_Hat_a_address0 <= tmp_63_fu_1021_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            Y_Hat_a_address0 <= grp_unconstrained_fu_723_Y_Hat_a_address0;
        else 
            Y_Hat_a_address0 <= "XXXXXXX";
        end if; 
    end process;


    Y_Hat_a_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter2, grp_unconstrained_fu_723_Y_Hat_a_ce0, ap_CS_fsm_state82)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            Y_Hat_a_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            Y_Hat_a_ce0 <= grp_unconstrained_fu_723_Y_Hat_a_ce0;
        else 
            Y_Hat_a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Y_Hat_a_we0_assign_proc : process(ap_block_pp3_stage0_11001, exitcond6_reg_1417_pp3_iter1_reg, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (exitcond6_reg_1417_pp3_iter1_reg = ap_const_lv1_0))) then 
            Y_Hat_a_we0 <= ap_const_logic_1;
        else 
            Y_Hat_a_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Y_Ref_KK_a_address0_assign_proc : process(ap_block_pp1_stage0, ap_enable_reg_pp1_iter2, grp_unconstrained_fu_723_Y_Ref_KK_a_address0, ap_CS_fsm_state82, tmp_s_fu_987_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            Y_Ref_KK_a_address0 <= tmp_s_fu_987_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            Y_Ref_KK_a_address0 <= grp_unconstrained_fu_723_Y_Ref_KK_a_address0;
        else 
            Y_Ref_KK_a_address0 <= "XXX";
        end if; 
    end process;


    Y_Ref_KK_a_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2, grp_unconstrained_fu_723_Y_Ref_KK_a_ce0, ap_CS_fsm_state82)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            Y_Ref_KK_a_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            Y_Ref_KK_a_ce0 <= grp_unconstrained_fu_723_Y_Ref_KK_a_ce0;
        else 
            Y_Ref_KK_a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Y_Ref_KK_a_we0_assign_proc : process(ap_block_pp1_stage0_11001, exitcond8_reg_1389_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (exitcond8_reg_1389_pp1_iter1_reg = ap_const_lv1_0))) then 
            Y_Ref_KK_a_we0 <= ap_const_logic_1;
        else 
            Y_Ref_KK_a_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(16);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(24);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(32);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(40);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(48);
    ap_CS_fsm_pp6_stage0 <= ap_CS_fsm(56);
    ap_CS_fsm_pp7_stage0 <= ap_CS_fsm(64);
    ap_CS_fsm_pp8_stage0 <= ap_CS_fsm(74);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state17 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(17);
    ap_CS_fsm_state27 <= ap_CS_fsm(23);
    ap_CS_fsm_state31 <= ap_CS_fsm(25);
    ap_CS_fsm_state37 <= ap_CS_fsm(31);
    ap_CS_fsm_state41 <= ap_CS_fsm(33);
    ap_CS_fsm_state47 <= ap_CS_fsm(39);
    ap_CS_fsm_state51 <= ap_CS_fsm(41);
    ap_CS_fsm_state57 <= ap_CS_fsm(47);
    ap_CS_fsm_state61 <= ap_CS_fsm(49);
    ap_CS_fsm_state67 <= ap_CS_fsm(55);
    ap_CS_fsm_state71 <= ap_CS_fsm(57);
    ap_CS_fsm_state77 <= ap_CS_fsm(63);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state81 <= ap_CS_fsm(65);
    ap_CS_fsm_state82 <= ap_CS_fsm(66);
    ap_CS_fsm_state83 <= ap_CS_fsm(67);
    ap_CS_fsm_state84 <= ap_CS_fsm(68);
    ap_CS_fsm_state85 <= ap_CS_fsm(69);
    ap_CS_fsm_state86 <= ap_CS_fsm(70);
    ap_CS_fsm_state87 <= ap_CS_fsm(71);
    ap_CS_fsm_state88 <= ap_CS_fsm(72);
    ap_CS_fsm_state89 <= ap_CS_fsm(73);
    ap_CS_fsm_state97 <= ap_CS_fsm(79);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, data_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((data_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, data_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((data_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond8_reg_1389, data_RVALID)
    begin
                ap_block_pp1_stage0_11001 <= ((data_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (exitcond8_reg_1389 = ap_const_lv1_0));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond8_reg_1389, data_RVALID)
    begin
                ap_block_pp1_stage0_subdone <= ((data_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (exitcond8_reg_1389 = ap_const_lv1_0));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(ap_enable_reg_pp2_iter1, exitcond7_reg_1403, data_RVALID)
    begin
                ap_block_pp2_stage0_11001 <= ((data_RVALID = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (exitcond7_reg_1403 = ap_const_lv1_0));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(ap_enable_reg_pp2_iter1, exitcond7_reg_1403, data_RVALID)
    begin
                ap_block_pp2_stage0_subdone <= ((data_RVALID = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (exitcond7_reg_1403 = ap_const_lv1_0));
    end process;

        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_11001_assign_proc : process(ap_enable_reg_pp3_iter1, exitcond6_reg_1417, data_RVALID)
    begin
                ap_block_pp3_stage0_11001 <= ((data_RVALID = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (exitcond6_reg_1417 = ap_const_lv1_0));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(ap_enable_reg_pp3_iter1, exitcond6_reg_1417, data_RVALID)
    begin
                ap_block_pp3_stage0_subdone <= ((data_RVALID = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (exitcond6_reg_1417 = ap_const_lv1_0));
    end process;

        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp4_stage0_11001_assign_proc : process(ap_enable_reg_pp4_iter1, exitcond5_reg_1431, data_RVALID)
    begin
                ap_block_pp4_stage0_11001 <= ((data_RVALID = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (exitcond5_reg_1431 = ap_const_lv1_0));
    end process;


    ap_block_pp4_stage0_subdone_assign_proc : process(ap_enable_reg_pp4_iter1, exitcond5_reg_1431, data_RVALID)
    begin
                ap_block_pp4_stage0_subdone <= ((data_RVALID = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (exitcond5_reg_1431 = ap_const_lv1_0));
    end process;

        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp5_stage0_11001_assign_proc : process(ap_enable_reg_pp5_iter1, exitcond4_reg_1445, data_RVALID)
    begin
                ap_block_pp5_stage0_11001 <= ((data_RVALID = ap_const_logic_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (exitcond4_reg_1445 = ap_const_lv1_0));
    end process;


    ap_block_pp5_stage0_subdone_assign_proc : process(ap_enable_reg_pp5_iter1, exitcond4_reg_1445, data_RVALID)
    begin
                ap_block_pp5_stage0_subdone <= ((data_RVALID = ap_const_logic_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (exitcond4_reg_1445 = ap_const_lv1_0));
    end process;

        ap_block_pp6_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp6_stage0_11001_assign_proc : process(ap_enable_reg_pp6_iter1, exitcond3_reg_1459, data_RVALID)
    begin
                ap_block_pp6_stage0_11001 <= ((data_RVALID = ap_const_logic_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (exitcond3_reg_1459 = ap_const_lv1_0));
    end process;


    ap_block_pp6_stage0_subdone_assign_proc : process(ap_enable_reg_pp6_iter1, exitcond3_reg_1459, data_RVALID)
    begin
                ap_block_pp6_stage0_subdone <= ((data_RVALID = ap_const_logic_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (exitcond3_reg_1459 = ap_const_lv1_0));
    end process;

        ap_block_pp7_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp7_stage0_11001_assign_proc : process(ap_enable_reg_pp7_iter1, exitcond2_reg_1473, data_RVALID)
    begin
                ap_block_pp7_stage0_11001 <= ((data_RVALID = ap_const_logic_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (exitcond2_reg_1473 = ap_const_lv1_0));
    end process;


    ap_block_pp7_stage0_subdone_assign_proc : process(ap_enable_reg_pp7_iter1, exitcond2_reg_1473, data_RVALID)
    begin
                ap_block_pp7_stage0_subdone <= ((data_RVALID = ap_const_logic_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (exitcond2_reg_1473 = ap_const_lv1_0));
    end process;

        ap_block_pp8_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp8_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp8_stage0_11001_assign_proc : process(ap_enable_reg_pp8_iter2, ap_block_state92_io)
    begin
                ap_block_pp8_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state92_io) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp8_stage0_subdone_assign_proc : process(ap_enable_reg_pp8_iter2, ap_block_state92_io)
    begin
                ap_block_pp8_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state92_io) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1));
    end process;


    ap_block_state10_pp0_stage0_iter1_assign_proc : process(data_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1 <= (data_RVALID = ap_const_logic_0);
    end process;

        ap_block_state18_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state19_pp1_stage0_iter1_assign_proc : process(exitcond8_reg_1389, data_RVALID)
    begin
                ap_block_state19_pp1_stage0_iter1 <= ((data_RVALID = ap_const_logic_0) and (exitcond8_reg_1389 = ap_const_lv1_0));
    end process;

        ap_block_state20_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state29_pp2_stage0_iter1_assign_proc : process(exitcond7_reg_1403, data_RVALID)
    begin
                ap_block_state29_pp2_stage0_iter1 <= ((data_RVALID = ap_const_logic_0) and (exitcond7_reg_1403 = ap_const_lv1_0));
    end process;

        ap_block_state30_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state39_pp3_stage0_iter1_assign_proc : process(exitcond6_reg_1417, data_RVALID)
    begin
                ap_block_state39_pp3_stage0_iter1 <= ((data_RVALID = ap_const_logic_0) and (exitcond6_reg_1417 = ap_const_lv1_0));
    end process;

        ap_block_state40_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state49_pp4_stage0_iter1_assign_proc : process(exitcond5_reg_1431, data_RVALID)
    begin
                ap_block_state49_pp4_stage0_iter1 <= ((data_RVALID = ap_const_logic_0) and (exitcond5_reg_1431 = ap_const_lv1_0));
    end process;

        ap_block_state50_pp4_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state59_pp5_stage0_iter1_assign_proc : process(exitcond4_reg_1445, data_RVALID)
    begin
                ap_block_state59_pp5_stage0_iter1 <= ((data_RVALID = ap_const_logic_0) and (exitcond4_reg_1445 = ap_const_lv1_0));
    end process;

        ap_block_state60_pp5_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp6_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state69_pp6_stage0_iter1_assign_proc : process(exitcond3_reg_1459, data_RVALID)
    begin
                ap_block_state69_pp6_stage0_iter1 <= ((data_RVALID = ap_const_logic_0) and (exitcond3_reg_1459 = ap_const_lv1_0));
    end process;

        ap_block_state70_pp6_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state78_pp7_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state79_pp7_stage0_iter1_assign_proc : process(exitcond2_reg_1473, data_RVALID)
    begin
                ap_block_state79_pp7_stage0_iter1 <= ((data_RVALID = ap_const_logic_0) and (exitcond2_reg_1473 = ap_const_lv1_0));
    end process;

        ap_block_state80_pp7_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state87_on_subcall_done_assign_proc : process(grp_guess_edu_fu_754_ap_done, grp_guess_babay_fu_746_ap_done)
    begin
                ap_block_state87_on_subcall_done <= ((grp_guess_babay_fu_746_ap_done = ap_const_logic_0) or (grp_guess_edu_fu_754_ap_done = ap_const_logic_0));
    end process;

        ap_block_state90_pp8_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state91_pp8_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state92_io_assign_proc : process(exitcond10_reg_1548_pp8_iter1_reg, ap_sig_ioackin_data_WREADY)
    begin
                ap_block_state92_io <= ((ap_sig_ioackin_data_WREADY = ap_const_logic_0) and (exitcond10_reg_1548_pp8_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state92_pp8_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(exitcond9_fu_939_p2)
    begin
        if ((exitcond9_fu_939_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state18_assign_proc : process(exitcond8_fu_975_p2)
    begin
        if ((exitcond8_fu_975_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state18 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state28_assign_proc : process(exitcond7_fu_992_p2)
    begin
        if ((exitcond7_fu_992_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state28 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state28 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state38_assign_proc : process(exitcond6_fu_1009_p2)
    begin
        if ((exitcond6_fu_1009_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state38 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state38 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state48_assign_proc : process(exitcond5_fu_1026_p2)
    begin
        if ((exitcond5_fu_1026_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state48 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state48 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter0_state58_assign_proc : process(exitcond4_fu_1043_p2)
    begin
        if ((exitcond4_fu_1043_p2 = ap_const_lv1_1)) then 
            ap_condition_pp5_exit_iter0_state58 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter0_state58 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp6_exit_iter0_state68_assign_proc : process(exitcond3_fu_1060_p2)
    begin
        if ((exitcond3_fu_1060_p2 = ap_const_lv1_1)) then 
            ap_condition_pp6_exit_iter0_state68 <= ap_const_logic_1;
        else 
            ap_condition_pp6_exit_iter0_state68 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp7_exit_iter0_state78_assign_proc : process(exitcond2_fu_1077_p2)
    begin
        if ((exitcond2_fu_1077_p2 = ap_const_lv1_1)) then 
            ap_condition_pp7_exit_iter0_state78 <= ap_const_logic_1;
        else 
            ap_condition_pp7_exit_iter0_state78 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp8_exit_iter0_state90_assign_proc : process(exitcond10_fu_1236_p2)
    begin
        if ((exitcond10_fu_1236_p2 = ap_const_lv1_1)) then 
            ap_condition_pp8_exit_iter0_state90 <= ap_const_logic_1;
        else 
            ap_condition_pp8_exit_iter0_state90 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state97, data_BVALID)
    begin
        if (((data_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state97))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);
    ap_enable_pp6 <= (ap_idle_pp6 xor ap_const_logic_1);
    ap_enable_pp7 <= (ap_idle_pp7 xor ap_const_logic_1);
    ap_enable_pp8 <= (ap_idle_pp8 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter2)
    begin
        if (((ap_enable_reg_pp4_iter2 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter2)
    begin
        if (((ap_enable_reg_pp5_iter2 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp6_assign_proc : process(ap_enable_reg_pp6_iter1, ap_enable_reg_pp6_iter0, ap_enable_reg_pp6_iter2)
    begin
        if (((ap_enable_reg_pp6_iter2 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0))) then 
            ap_idle_pp6 <= ap_const_logic_1;
        else 
            ap_idle_pp6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp7_assign_proc : process(ap_enable_reg_pp7_iter1, ap_enable_reg_pp7_iter0, ap_enable_reg_pp7_iter2)
    begin
        if (((ap_enable_reg_pp7_iter2 = ap_const_logic_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_0))) then 
            ap_idle_pp7 <= ap_const_logic_1;
        else 
            ap_idle_pp7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp8_assign_proc : process(ap_enable_reg_pp8_iter2, ap_enable_reg_pp8_iter0, ap_enable_reg_pp8_iter1)
    begin
        if (((ap_enable_reg_pp8_iter1 = ap_const_logic_0) and (ap_enable_reg_pp8_iter0 = ap_const_logic_0) and (ap_enable_reg_pp8_iter2 = ap_const_logic_0))) then 
            ap_idle_pp8 <= ap_const_logic_1;
        else 
            ap_idle_pp8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_row1_phi_fu_610_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond8_reg_1389, row1_reg_606, row_5_reg_1393)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond8_reg_1389 = ap_const_lv1_0))) then 
            ap_phi_mux_row1_phi_fu_610_p4 <= row_5_reg_1393;
        else 
            ap_phi_mux_row1_phi_fu_610_p4 <= row1_reg_606;
        end if; 
    end process;


    ap_phi_mux_row2_phi_fu_622_p4_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, exitcond7_reg_1403, row2_reg_618, row_6_reg_1407)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (exitcond7_reg_1403 = ap_const_lv1_0))) then 
            ap_phi_mux_row2_phi_fu_622_p4 <= row_6_reg_1407;
        else 
            ap_phi_mux_row2_phi_fu_622_p4 <= row2_reg_618;
        end if; 
    end process;


    ap_phi_mux_row3_phi_fu_634_p4_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, exitcond6_reg_1417, row3_reg_630, row_7_reg_1421)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (exitcond6_reg_1417 = ap_const_lv1_0))) then 
            ap_phi_mux_row3_phi_fu_634_p4 <= row_7_reg_1421;
        else 
            ap_phi_mux_row3_phi_fu_634_p4 <= row3_reg_630;
        end if; 
    end process;


    ap_phi_mux_row4_phi_fu_646_p4_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0, exitcond5_reg_1431, row4_reg_642, row_8_reg_1435)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (exitcond5_reg_1431 = ap_const_lv1_0))) then 
            ap_phi_mux_row4_phi_fu_646_p4 <= row_8_reg_1435;
        else 
            ap_phi_mux_row4_phi_fu_646_p4 <= row4_reg_642;
        end if; 
    end process;


    ap_phi_mux_row5_phi_fu_658_p4_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter1, ap_block_pp5_stage0, exitcond4_reg_1445, row5_reg_654, row_9_reg_1449)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (exitcond4_reg_1445 = ap_const_lv1_0))) then 
            ap_phi_mux_row5_phi_fu_658_p4 <= row_9_reg_1449;
        else 
            ap_phi_mux_row5_phi_fu_658_p4 <= row5_reg_654;
        end if; 
    end process;


    ap_phi_mux_row6_phi_fu_670_p4_assign_proc : process(ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter1, ap_block_pp6_stage0, exitcond3_reg_1459, row6_reg_666, row_10_reg_1463)
    begin
        if (((ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (exitcond3_reg_1459 = ap_const_lv1_0))) then 
            ap_phi_mux_row6_phi_fu_670_p4 <= row_10_reg_1463;
        else 
            ap_phi_mux_row6_phi_fu_670_p4 <= row6_reg_666;
        end if; 
    end process;


    ap_phi_mux_row7_phi_fu_682_p4_assign_proc : process(ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter1, ap_block_pp7_stage0, exitcond2_reg_1473, row7_reg_678, row_11_reg_1477)
    begin
        if (((ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (exitcond2_reg_1473 = ap_const_lv1_0))) then 
            ap_phi_mux_row7_phi_fu_682_p4 <= row_11_reg_1477;
        else 
            ap_phi_mux_row7_phi_fu_682_p4 <= row7_reg_678;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state97, data_BVALID)
    begin
        if (((data_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state97))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_data_ARREADY_assign_proc : process(data_ARREADY, ap_reg_ioackin_data_ARREADY)
    begin
        if ((ap_reg_ioackin_data_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_data_ARREADY <= data_ARREADY;
        else 
            ap_sig_ioackin_data_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_data_AWREADY_assign_proc : process(data_AWREADY, ap_reg_ioackin_data_AWREADY)
    begin
        if ((ap_reg_ioackin_data_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_data_AWREADY <= data_AWREADY;
        else 
            ap_sig_ioackin_data_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_data_WREADY_assign_proc : process(data_WREADY, ap_reg_ioackin_data_WREADY)
    begin
        if ((ap_reg_ioackin_data_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_data_WREADY <= data_WREADY;
        else 
            ap_sig_ioackin_data_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    data_ARADDR_assign_proc : process(ap_CS_fsm_state71, ap_CS_fsm_state61, ap_CS_fsm_state51, ap_CS_fsm_state41, ap_CS_fsm_state31, ap_CS_fsm_state21, ap_CS_fsm_state11, ap_CS_fsm_state2, data_addr_1_reg_1334, data_addr_2_reg_1340, data_addr_3_reg_1346, data_addr_4_reg_1352, data_addr_5_reg_1358, data_addr_6_reg_1364, data_addr_7_reg_1370, tmp_87_fu_857_p1, ap_reg_ioackin_data_ARREADY)
    begin
        if ((ap_reg_ioackin_data_ARREADY = ap_const_logic_0)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
                data_ARADDR <= data_addr_1_reg_1334;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
                data_ARADDR <= data_addr_2_reg_1340;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
                data_ARADDR <= data_addr_3_reg_1346;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                data_ARADDR <= data_addr_4_reg_1352;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                data_ARADDR <= data_addr_5_reg_1358;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                data_ARADDR <= data_addr_6_reg_1364;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                data_ARADDR <= data_addr_7_reg_1370;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                data_ARADDR <= tmp_87_fu_857_p1(32 - 1 downto 0);
            else 
                data_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            data_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_ARLEN_assign_proc : process(ap_CS_fsm_state71, ap_CS_fsm_state61, ap_CS_fsm_state51, ap_CS_fsm_state41, ap_CS_fsm_state31, ap_CS_fsm_state21, ap_CS_fsm_state11, ap_CS_fsm_state2, ap_reg_ioackin_data_ARREADY)
    begin
        if ((((ap_reg_ioackin_data_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((ap_reg_ioackin_data_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state61)) or ((ap_reg_ioackin_data_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state71)))) then 
            data_ARLEN <= ap_const_lv32_90;
        elsif (((ap_reg_ioackin_data_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            data_ARLEN <= ap_const_lv32_20;
        elsif (((ap_reg_ioackin_data_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            data_ARLEN <= ap_const_lv32_60;
        elsif (((ap_reg_ioackin_data_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            data_ARLEN <= ap_const_lv32_C;
        elsif (((ap_reg_ioackin_data_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            data_ARLEN <= ap_const_lv32_8;
        elsif (((ap_reg_ioackin_data_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_ARLEN <= ap_const_lv32_4;
        else 
            data_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_ARVALID_assign_proc : process(ap_CS_fsm_state71, ap_CS_fsm_state61, ap_CS_fsm_state51, ap_CS_fsm_state41, ap_CS_fsm_state31, ap_CS_fsm_state21, ap_CS_fsm_state11, ap_CS_fsm_state2, ap_reg_ioackin_data_ARREADY)
    begin
        if ((((ap_reg_ioackin_data_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_reg_ioackin_data_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_reg_ioackin_data_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((ap_reg_ioackin_data_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((ap_reg_ioackin_data_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((ap_reg_ioackin_data_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((ap_reg_ioackin_data_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state61)) or ((ap_reg_ioackin_data_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state71)))) then 
            data_ARVALID <= ap_const_logic_1;
        else 
            data_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    data_AWVALID_assign_proc : process(ap_CS_fsm_state89, grp_sph_dec_fu_738_ap_done, ap_reg_ioackin_data_AWREADY)
    begin
        if (((grp_sph_dec_fu_738_ap_done = ap_const_logic_1) and (ap_reg_ioackin_data_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state89))) then 
            data_AWVALID <= ap_const_logic_1;
        else 
            data_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    data_BREADY_assign_proc : process(ap_CS_fsm_state97, data_BVALID)
    begin
        if (((data_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state97))) then 
            data_BREADY <= ap_const_logic_1;
        else 
            data_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    data_RREADY_assign_proc : process(ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter1, exitcond2_reg_1473, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter1, exitcond3_reg_1459, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter1, exitcond4_reg_1445, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, exitcond5_reg_1431, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, exitcond6_reg_1417, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond7_reg_1403, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond8_reg_1389, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_block_pp3_stage0_11001, ap_block_pp4_stage0_11001, ap_block_pp5_stage0_11001, ap_block_pp6_stage0_11001, ap_block_pp7_stage0_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond8_reg_1389 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (exitcond7_reg_1403 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (exitcond6_reg_1417 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (exitcond5_reg_1431 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (exitcond4_reg_1445 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (exitcond3_reg_1459 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (exitcond2_reg_1473 = ap_const_lv1_0)))) then 
            data_RREADY <= ap_const_logic_1;
        else 
            data_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    data_WVALID_assign_proc : process(ap_enable_reg_pp8_iter2, exitcond10_reg_1548_pp8_iter1_reg, ap_reg_ioackin_data_WREADY, ap_block_pp8_stage0_01001)
    begin
        if (((ap_reg_ioackin_data_WREADY = ap_const_logic_0) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1) and (exitcond10_reg_1548_pp8_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp8_stage0_01001))) then 
            data_WVALID <= ap_const_logic_1;
        else 
            data_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    data_blk_n_AR_assign_proc : process(m_axi_data_ARREADY, ap_CS_fsm_state71, ap_CS_fsm_state61, ap_CS_fsm_state51, ap_CS_fsm_state41, ap_CS_fsm_state31, ap_CS_fsm_state21, ap_CS_fsm_state11, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            data_blk_n_AR <= m_axi_data_ARREADY;
        else 
            data_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    data_blk_n_AW_assign_proc : process(m_axi_data_AWREADY, ap_CS_fsm_state89)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            data_blk_n_AW <= m_axi_data_AWREADY;
        else 
            data_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    data_blk_n_B_assign_proc : process(m_axi_data_BVALID, ap_CS_fsm_state97)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            data_blk_n_B <= m_axi_data_BVALID;
        else 
            data_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    data_blk_n_R_assign_proc : process(m_axi_data_RVALID, ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter1, ap_block_pp7_stage0, exitcond2_reg_1473, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter1, ap_block_pp6_stage0, exitcond3_reg_1459, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter1, ap_block_pp5_stage0, exitcond4_reg_1445, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0, exitcond5_reg_1431, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, exitcond6_reg_1417, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, exitcond7_reg_1403, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond8_reg_1389, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond8_reg_1389 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (exitcond7_reg_1403 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (exitcond6_reg_1417 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (exitcond5_reg_1431 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (exitcond4_reg_1445 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (exitcond3_reg_1459 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (exitcond2_reg_1473 = ap_const_lv1_0)))) then 
            data_blk_n_R <= m_axi_data_RVALID;
        else 
            data_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    data_blk_n_W_assign_proc : process(m_axi_data_WREADY, ap_enable_reg_pp8_iter2, ap_block_pp8_stage0, exitcond10_reg_1548_pp8_iter1_reg)
    begin
        if (((ap_enable_reg_pp8_iter2 = ap_const_logic_1) and (exitcond10_reg_1548_pp8_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp8_stage0))) then 
            data_blk_n_W <= m_axi_data_WREADY;
        else 
            data_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    exitcond10_fu_1236_p2 <= "1" when (indvar_reg_712 = ap_const_lv4_C) else "0";
    exitcond1_fu_1110_p2 <= "1" when (row8_reg_690 = ap_const_lv4_C) else "0";
    exitcond2_fu_1077_p2 <= "1" when (ap_phi_mux_row7_phi_fu_682_p4 = ap_const_lv8_90) else "0";
    exitcond3_fu_1060_p2 <= "1" when (ap_phi_mux_row6_phi_fu_670_p4 = ap_const_lv8_90) else "0";
    exitcond4_fu_1043_p2 <= "1" when (ap_phi_mux_row5_phi_fu_658_p4 = ap_const_lv8_90) else "0";
    exitcond5_fu_1026_p2 <= "1" when (ap_phi_mux_row4_phi_fu_646_p4 = ap_const_lv6_20) else "0";
    exitcond6_fu_1009_p2 <= "1" when (ap_phi_mux_row3_phi_fu_634_p4 = ap_const_lv7_60) else "0";
    exitcond7_fu_992_p2 <= "1" when (ap_phi_mux_row2_phi_fu_622_p4 = ap_const_lv4_C) else "0";
    exitcond8_fu_975_p2 <= "1" when (ap_phi_mux_row1_phi_fu_610_p4 = ap_const_lv4_8) else "0";
    exitcond9_fu_939_p2 <= "1" when (row_reg_595 = ap_const_lv3_4) else "0";
    exitcond_fu_1127_p2 <= "1" when (row9_reg_701 = ap_const_lv8_90) else "0";
    grp_guess_babay_fu_746_ap_start <= grp_guess_babay_fu_746_ap_start_reg;
    grp_guess_edu_fu_754_ap_start <= grp_guess_edu_fu_754_ap_start_reg;
    grp_sph_dec_fu_738_ap_start <= grp_sph_dec_fu_738_ap_start_reg;
    grp_unconstrained_fu_723_ap_start <= grp_unconstrained_fu_723_ap_start_reg;
    indvar1_fu_1248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar_reg_712),64));
    indvar_next_fu_1242_p2 <= std_logic_vector(unsigned(indvar_reg_712) + unsigned(ap_const_lv4_1));
    notlhs2_fu_1198_p2 <= "0" when (tmp_89_fu_1166_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_1180_p2 <= "0" when (tmp_78_fu_1148_p4 = ap_const_lv8_FF) else "1";
    notrhs2_fu_1204_p2 <= "1" when (tmp_90_fu_1176_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_1186_p2 <= "1" when (tmp_88_fu_1158_p1 = ap_const_lv23_0) else "0";
    roh_1_fu_1228_p3 <= 
        grp_guess_edu_fu_754_ap_return when (tmp_95_fu_1222_p2(0) = '1') else 
        grp_guess_babay_fu_746_ap_return;
    roh_2_to_int_fu_1144_p1 <= grp_guess_edu_fu_754_ap_return;
    roh_babay_to_int_fu_1162_p1 <= grp_guess_babay_fu_746_ap_return;
    row_10_fu_1066_p2 <= std_logic_vector(unsigned(ap_phi_mux_row6_phi_fu_670_p4) + unsigned(ap_const_lv8_1));
    row_11_fu_1083_p2 <= std_logic_vector(unsigned(ap_phi_mux_row7_phi_fu_682_p4) + unsigned(ap_const_lv8_1));
    row_12_fu_1116_p2 <= std_logic_vector(unsigned(row8_reg_690) + unsigned(ap_const_lv4_1));
    row_13_fu_1133_p2 <= std_logic_vector(unsigned(row9_reg_701) + unsigned(ap_const_lv8_1));
    row_4_fu_945_p2 <= std_logic_vector(unsigned(row_reg_595) + unsigned(ap_const_lv3_1));
    row_5_fu_981_p2 <= std_logic_vector(unsigned(ap_phi_mux_row1_phi_fu_610_p4) + unsigned(ap_const_lv4_1));
    row_6_fu_998_p2 <= std_logic_vector(unsigned(ap_phi_mux_row2_phi_fu_622_p4) + unsigned(ap_const_lv4_1));
    row_7_fu_1015_p2 <= std_logic_vector(unsigned(ap_phi_mux_row3_phi_fu_634_p4) + unsigned(ap_const_lv7_1));
    row_8_fu_1032_p2 <= std_logic_vector(unsigned(ap_phi_mux_row4_phi_fu_646_p4) + unsigned(ap_const_lv6_1));
    row_9_fu_1049_p2 <= std_logic_vector(unsigned(ap_phi_mux_row5_phi_fu_658_p4) + unsigned(ap_const_lv8_1));

    theta_kk_address0_assign_proc : process(ap_CS_fsm_state87, grp_unconstrained_fu_723_theta_kk_address0, grp_guess_babay_fu_746_theta_kk_address0, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            theta_kk_address0 <= grp_guess_babay_fu_746_theta_kk_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            theta_kk_address0 <= grp_unconstrained_fu_723_theta_kk_address0;
        else 
            theta_kk_address0 <= "XXXX";
        end if; 
    end process;


    theta_kk_ce0_assign_proc : process(ap_CS_fsm_state87, grp_unconstrained_fu_723_theta_kk_ce0, grp_guess_babay_fu_746_theta_kk_ce0, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            theta_kk_ce0 <= grp_guess_babay_fu_746_theta_kk_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            theta_kk_ce0 <= grp_unconstrained_fu_723_theta_kk_ce0;
        else 
            theta_kk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    theta_kk_we0_assign_proc : process(grp_unconstrained_fu_723_theta_kk_we0, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            theta_kk_we0 <= grp_unconstrained_fu_723_theta_kk_we0;
        else 
            theta_kk_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_62_fu_1004_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row2_reg_618_pp2_iter1_reg),64));
    tmp_63_fu_1021_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row3_reg_630_pp3_iter1_reg),64));
    tmp_64_fu_1038_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row4_reg_642_pp4_iter1_reg),64));
    tmp_65_fu_1055_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row5_reg_654_pp5_iter1_reg),64));
    tmp_66_fu_1072_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row6_reg_666_pp6_iter1_reg),64));
    tmp_67_fu_1089_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row7_reg_678_pp7_iter1_reg),64));
    tmp_68_fu_1122_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row8_reg_690),64));
    tmp_70_fu_1139_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row9_reg_701),64));
    tmp_78_fu_1148_p4 <= roh_2_to_int_fu_1144_p1(30 downto 23);
    tmp_79_fu_867_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out1_reg_1277),64));
    tmp_80_fu_876_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(H_HAT_INV_src1_reg_1282),64));
    tmp_81_fu_885_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(V_GEN_src1_reg_1287),64));
    tmp_82_fu_894_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(V_MUL_H_INV_src1_reg_1292),64));
    tmp_83_fu_903_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(R_HAT_src9_reg_1297),64));
    tmp_84_fu_912_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Y_HAT_src7_reg_1302),64));
    tmp_85_fu_921_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(U_KK_src5_reg_1307),64));
    tmp_86_fu_930_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Y_REF_KK_src3_reg_1312),64));
    tmp_87_fu_857_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(X_KK_src1_reg_1317),64));
    tmp_88_fu_1158_p1 <= roh_2_to_int_fu_1144_p1(23 - 1 downto 0);
    tmp_89_fu_1166_p4 <= roh_babay_to_int_fu_1162_p1(30 downto 23);
    tmp_90_fu_1176_p1 <= roh_babay_to_int_fu_1162_p1(23 - 1 downto 0);
    tmp_91_fu_1192_p2 <= (notrhs_fu_1186_p2 or notlhs_fu_1180_p2);
    tmp_92_fu_1210_p2 <= (notrhs2_fu_1204_p2 or notlhs2_fu_1198_p2);
    tmp_93_fu_1216_p2 <= (tmp_92_fu_1210_p2 and tmp_91_fu_1192_p2);
    tmp_95_fu_1222_p2 <= (tmp_94_fu_761_p2 and tmp_93_fu_1216_p2);
    tmp_fu_951_p1 <= row_reg_595(2 - 1 downto 0);
    tmp_s_fu_987_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row1_reg_606_pp1_iter1_reg),64));
end behav;
