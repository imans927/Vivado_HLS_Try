-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sph_dec is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    V_Gen_a_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    V_Gen_a_ce0 : OUT STD_LOGIC;
    V_Gen_a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    roh : IN STD_LOGIC_VECTOR (31 downto 0);
    U_unc_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    U_unc_ce0 : OUT STD_LOGIC;
    U_unc_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    U_opt_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    U_opt_ce0 : OUT STD_LOGIC;
    U_opt_we0 : OUT STD_LOGIC;
    U_opt_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sph_dec is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (28 downto 0) := "00000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (28 downto 0) := "00000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (28 downto 0) := "00000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (28 downto 0) := "00000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (28 downto 0) := "00000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (28 downto 0) := "00000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (28 downto 0) := "00001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (28 downto 0) := "00010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (28 downto 0) := "00100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (28 downto 0) := "01000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (28 downto 0) := "10000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv64_3EB0C6F7A0B5ED8D : STD_LOGIC_VECTOR (63 downto 0) := "0011111010110000110001101111011110100000101101011110110110001101";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv6_23 : STD_LOGIC_VECTOR (5 downto 0) := "100011";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_379_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_422 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal indvarinc_fu_430_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ll_1_fu_453_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond3_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_474_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_818 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_36_fu_480_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_reg_823 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond2_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal switch_point_addr_2_reg_830 : STD_LOGIC_VECTOR (3 downto 0);
    signal switch_point_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal switch_point_load_reg_835 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_37_fu_497_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_reg_840 : STD_LOGIC_VECTOR (31 downto 0);
    signal ii_1_fu_513_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ii_1_reg_848 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_43_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_reg_853 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_reg_880 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_51_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_reg_892 : STD_LOGIC_VECTOR (0 downto 0);
    signal dist_matmul_3_fu_593_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal dist_array_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dist_array_load_reg_907 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_393_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_reg_912 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_402_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_405_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_41_reg_922 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_67_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_67_reg_928 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal tmp_45_fu_693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_reg_932 : STD_LOGIC_VECTOR (0 downto 0);
    signal level_1_fu_699_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal jj_1_fu_716_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal jj_1_reg_944 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_55_fu_722_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_55_reg_949 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_710_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal U_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal switch_point_addr_3_reg_967 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal tmp_57_fu_739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_972 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_fu_416_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal level_2_reg_976 : STD_LOGIC_VECTOR (3 downto 0);
    signal switch_point_addr_4_reg_981 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal dist_array_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dist_array_ce0 : STD_LOGIC;
    signal dist_array_we0 : STD_LOGIC;
    signal dist_array_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal switch_point_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal switch_point_ce0 : STD_LOGIC;
    signal switch_point_we0 : STD_LOGIC;
    signal switch_point_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal switch_point_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal switch_point_ce1 : STD_LOGIC;
    signal switch_point_we1 : STD_LOGIC;
    signal switch_point_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal switch_point_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal U_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal U_ce0 : STD_LOGIC;
    signal U_we0 : STD_LOGIC;
    signal invdar_reg_250 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ll_reg_261 : STD_LOGIC_VECTOR (3 downto 0);
    signal level_reg_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_reg_284 : STD_LOGIC_VECTOR (5 downto 0);
    signal ii_reg_295 : STD_LOGIC_VECTOR (3 downto 0);
    signal dist_matmul_reg_306 : STD_LOGIC_VECTOR (31 downto 0);
    signal jj_reg_318 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_phi_mux_level_3_ph_phi_fu_332_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal level_3_ph_reg_329 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_phi_mux_level_4_phi_fu_371_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal level_3_reg_343 : STD_LOGIC_VECTOR (31 downto 0);
    signal kk_reg_355 : STD_LOGIC_VECTOR (3 downto 0);
    signal level_5_cast_fu_771_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal level_4_reg_367 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_436_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_fu_459_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_fu_525_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_50_fu_535_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_48_fu_705_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_58_fu_745_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_60_fu_766_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_0_fu_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_fu_687_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_fu_732_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_397_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_379_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_379_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_402_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_53_fu_485_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_59_fu_491_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ii_cast_fu_503_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_49_fu_530_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_demorgan_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_385_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dist_matmul_4_fu_562_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal dist_matmul_5_fu_585_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_to_int_fu_604_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_41_to_int_fu_622_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_42_fu_608_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_62_fu_618_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_fu_625_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_68_fu_635_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs1_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_63_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_64_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_65_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_66_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_69_fu_750_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_379_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (28 downto 0);

    component predictive_controbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component predictive_controlbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component predictive_controcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component predictive_contromb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component predictive_controeOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component predictive_controncg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component predictive_controocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component guess_edu_u_educaibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sph_dec_switch_pokbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    dist_array_U : component guess_edu_u_educaibs
    generic map (
        DataWidth => 32,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dist_array_address0,
        ce0 => dist_array_ce0,
        we0 => dist_array_we0,
        d0 => dist_array_d0,
        q0 => dist_array_q0);

    switch_point_U : component sph_dec_switch_pokbM
    generic map (
        DataWidth => 32,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => switch_point_address0,
        ce0 => switch_point_ce0,
        we0 => switch_point_we0,
        d0 => switch_point_d0,
        q0 => switch_point_q0,
        address1 => switch_point_address1,
        ce1 => switch_point_ce1,
        we1 => switch_point_we1,
        d1 => switch_point_d1,
        q1 => switch_point_q1);

    U_U : component guess_edu_u_educaibs
    generic map (
        DataWidth => 32,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => U_address0,
        ce0 => U_ce0,
        we0 => U_we0,
        d0 => switch_point_q0,
        q0 => U_q0);

    predictive_controbkb_U47 : component predictive_controbkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_379_p0,
        din1 => grp_fu_379_p1,
        opcode => grp_fu_379_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_379_p2);

    predictive_controlbW_U48 : component predictive_controlbW
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => dist_matmul_reg_306,
        din1 => V_Gen_a_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_385_p2);

    predictive_controcud_U49 : component predictive_controcud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_422,
        din1 => reg_422,
        ce => ap_const_logic_1,
        dout => grp_fu_393_p2);

    predictive_contromb6_U50 : component predictive_contromb6
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => U_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_397_p1);

    predictive_controeOg_U51 : component predictive_controeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => grp_fu_402_p0,
        dout => grp_fu_402_p1);

    predictive_controncg_U52 : component predictive_controncg
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_402_p1,
        din1 => ap_const_lv64_3EB0C6F7A0B5ED8D,
        ce => ap_const_logic_1,
        dout => grp_fu_405_p2);

    predictive_controocq_U53 : component predictive_controocq
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_402_p1,
        din1 => tmp_41_reg_922,
        opcode => ap_const_lv5_5,
        dout => tmp_66_fu_411_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    dist_matmul_reg_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                dist_matmul_reg_306 <= dist_matmul_3_fu_593_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                dist_matmul_reg_306 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i1_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_447_p2 = ap_const_lv1_1))) then 
                i1_reg_284 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state27) and (tmp_57_fu_739_p2 = ap_const_lv1_1))) then 
                i1_reg_284 <= i_reg_818;
            end if; 
        end if;
    end process;

    ii_reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                ii_reg_295 <= ii_1_reg_848;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                ii_reg_295 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    invdar_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_441_p2 = ap_const_lv1_0))) then 
                invdar_reg_250 <= indvarinc_fu_430_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                invdar_reg_250 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    jj_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (tmp_45_fu_693_p2 = ap_const_lv1_1) and (tmp_67_fu_681_p2 = ap_const_lv1_1))) then 
                jj_reg_318 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                jj_reg_318 <= jj_1_reg_944;
            end if; 
        end if;
    end process;

    kk_reg_355_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                kk_reg_355 <= ap_const_lv4_B;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                kk_reg_355 <= grp_fu_416_p2;
            end if; 
        end if;
    end process;

    level_3_ph_reg_329_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (tmp_67_fu_681_p2 = ap_const_lv1_0))) then 
                level_3_ph_reg_329 <= level_reg_272;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state21) and (tmp_45_fu_693_p2 = ap_const_lv1_0) and (tmp_67_fu_681_p2 = ap_const_lv1_1))) then 
                level_3_ph_reg_329 <= level_1_fu_699_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state26) and (tmp_45_reg_932 = ap_const_lv1_1) and (tmp_67_reg_928 = ap_const_lv1_1))) then 
                level_3_ph_reg_329 <= ap_const_lv32_B;
            end if; 
        end if;
    end process;

    level_3_reg_343_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                level_3_reg_343 <= ap_phi_mux_level_3_ph_phi_fu_332_p6;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                level_3_reg_343 <= ap_phi_mux_level_4_phi_fu_371_p4;
            end if; 
        end if;
    end process;

    level_4_reg_367_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_fu_760_p2 = ap_const_lv1_0))) then 
                level_4_reg_367 <= level_3_reg_343;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state29) and (icmp_reg_972 = ap_const_lv1_1))) then 
                level_4_reg_367 <= level_5_cast_fu_771_p1;
            end if; 
        end if;
    end process;

    level_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_447_p2 = ap_const_lv1_1))) then 
                level_reg_272 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state27) and (tmp_57_fu_739_p2 = ap_const_lv1_1))) then 
                level_reg_272 <= level_3_reg_343;
            end if; 
        end if;
    end process;

    ll_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_441_p2 = ap_const_lv1_1))) then 
                ll_reg_261 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_447_p2 = ap_const_lv1_0))) then 
                ll_reg_261 <= ll_1_fu_453_p2;
            end if; 
        end if;
    end process;

    p_0_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (exitcond_fu_710_p2 = ap_const_lv1_1))) then 
                p_0_fu_102 <= reg_422;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_447_p2 = ap_const_lv1_1))) then 
                p_0_fu_102 <= roh;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                dist_array_load_reg_907 <= dist_array_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_reg_818 <= i_fu_474_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                icmp_reg_972 <= icmp_fu_760_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                ii_1_reg_848 <= ii_1_fu_513_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                jj_1_reg_944 <= jj_1_fu_716_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_fu_760_p2 = ap_const_lv1_1))) then
                level_2_reg_976 <= grp_fu_416_p2;
                switch_point_addr_4_reg_981 <= tmp_60_fu_766_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state14))) then
                reg_422 <= grp_fu_379_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_468_p2 = ap_const_lv1_0))) then
                switch_point_addr_2_reg_830 <= tmp_36_fu_480_p1(4 - 1 downto 0);
                tmp_36_reg_823 <= tmp_36_fu_480_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (tmp_57_fu_739_p2 = ap_const_lv1_0))) then
                switch_point_addr_3_reg_967 <= tmp_58_fu_745_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                switch_point_load_reg_835 <= switch_point_q0;
                    tmp_37_reg_840(31 downto 2) <= tmp_37_fu_497_p2(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                tmp_38_reg_912 <= grp_fu_393_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                tmp_41_reg_922 <= grp_fu_405_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond1_fu_507_p2 = ap_const_lv1_0))) then
                tmp_43_reg_853 <= tmp_43_fu_519_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (tmp_67_fu_681_p2 = ap_const_lv1_1))) then
                tmp_45_reg_932 <= tmp_45_fu_693_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_43_reg_853 = ap_const_lv1_0))) then
                tmp_47_reg_880 <= tmp_47_fu_540_p2;
                tmp_51_reg_892 <= tmp_51_fu_546_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (exitcond_fu_710_p2 = ap_const_lv1_0))) then
                    tmp_55_reg_949(3 downto 0) <= tmp_55_fu_722_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                tmp_67_reg_928 <= tmp_67_fu_681_p2;
            end if;
        end if;
    end process;
    tmp_37_reg_840(1 downto 0) <= "00";
    tmp_55_reg_949(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond3_fu_447_p2, ap_CS_fsm_state4, exitcond2_fu_468_p2, ap_CS_fsm_state6, exitcond1_fu_507_p2, tmp_67_fu_681_p2, ap_CS_fsm_state21, tmp_45_fu_693_p2, ap_CS_fsm_state22, exitcond_fu_710_p2, ap_CS_fsm_state27, tmp_57_fu_739_p2, tmp_s_fu_441_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_441_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_447_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_468_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond1_fu_507_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (tmp_45_fu_693_p2 = ap_const_lv1_1) and (tmp_67_fu_681_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (exitcond_fu_710_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (tmp_57_fu_739_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    U_address0_assign_proc : process(tmp_36_reg_823, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state22, tmp_55_fu_722_p1, tmp_46_fu_525_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            U_address0 <= tmp_55_fu_722_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            U_address0 <= tmp_46_fu_525_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            U_address0 <= tmp_36_reg_823(4 - 1 downto 0);
        else 
            U_address0 <= "XXXX";
        end if; 
    end process;


    U_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            U_ce0 <= ap_const_logic_1;
        else 
            U_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    U_opt_address0 <= tmp_55_reg_949(4 - 1 downto 0);

    U_opt_ce0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            U_opt_ce0 <= ap_const_logic_1;
        else 
            U_opt_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    U_opt_d0 <= grp_fu_397_p1;

    U_opt_we0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            U_opt_we0 <= ap_const_logic_1;
        else 
            U_opt_we0 <= ap_const_logic_0;
        end if; 
    end process;

    U_unc_address0 <= tmp_36_reg_823(4 - 1 downto 0);

    U_unc_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            U_unc_ce0 <= ap_const_logic_1;
        else 
            U_unc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    U_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            U_we0 <= ap_const_logic_1;
        else 
            U_we0 <= ap_const_logic_0;
        end if; 
    end process;

    V_Gen_a_address0 <= tmp_50_fu_535_p1(8 - 1 downto 0);

    V_Gen_a_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            V_Gen_a_ce0 <= ap_const_logic_1;
        else 
            V_Gen_a_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, exitcond2_fu_468_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_468_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_level_3_ph_phi_fu_332_p6_assign_proc : process(tmp_67_reg_928, tmp_45_reg_932, level_3_ph_reg_329, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) and (tmp_45_reg_932 = ap_const_lv1_1) and (tmp_67_reg_928 = ap_const_lv1_1))) then 
            ap_phi_mux_level_3_ph_phi_fu_332_p6 <= ap_const_lv32_B;
        else 
            ap_phi_mux_level_3_ph_phi_fu_332_p6 <= level_3_ph_reg_329;
        end if; 
    end process;


    ap_phi_mux_level_4_phi_fu_371_p4_assign_proc : process(icmp_reg_972, ap_CS_fsm_state29, level_5_cast_fu_771_p1, level_4_reg_367)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) and (icmp_reg_972 = ap_const_lv1_1))) then 
            ap_phi_mux_level_4_phi_fu_371_p4 <= level_5_cast_fu_771_p1;
        else 
            ap_phi_mux_level_4_phi_fu_371_p4 <= level_4_reg_367;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, exitcond2_fu_468_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_468_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    dist_array_address0_assign_proc : process(ap_CS_fsm_state2, tmp_36_reg_823, ap_CS_fsm_state6, ap_CS_fsm_state21, tmp_fu_436_p1, tmp_48_fu_705_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            dist_array_address0 <= tmp_48_fu_705_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dist_array_address0 <= tmp_36_reg_823(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dist_array_address0 <= tmp_fu_436_p1(4 - 1 downto 0);
        else 
            dist_array_address0 <= "XXXX";
        end if; 
    end process;


    dist_array_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            dist_array_ce0 <= ap_const_logic_1;
        else 
            dist_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dist_array_d0_assign_proc : process(reg_422, ap_CS_fsm_state2, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            dist_array_d0 <= reg_422;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dist_array_d0 <= ap_const_lv32_0;
        else 
            dist_array_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dist_array_we0_assign_proc : process(ap_CS_fsm_state2, tmp_67_fu_681_p2, ap_CS_fsm_state21, tmp_45_fu_693_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (tmp_45_fu_693_p2 = ap_const_lv1_0) and (tmp_67_fu_681_p2 = ap_const_lv1_1)))) then 
            dist_array_we0 <= ap_const_logic_1;
        else 
            dist_array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dist_matmul_3_fu_593_p3 <= 
        dist_matmul_reg_306 when (tmp_43_reg_853(0) = '1') else 
        dist_matmul_5_fu_585_p3;
    dist_matmul_4_fu_562_p3 <= 
        grp_fu_379_p2 when (sel_tmp1_fu_557_p2(0) = '1') else 
        dist_matmul_reg_306;
    dist_matmul_5_fu_585_p3 <= 
        grp_fu_385_p2 when (sel_tmp6_fu_580_p2(0) = '1') else 
        dist_matmul_4_fu_562_p3;
    exitcond1_fu_507_p2 <= "1" when (ii_reg_295 = ap_const_lv4_C) else "0";
    exitcond2_fu_468_p2 <= "1" when (i1_reg_284 = ap_const_lv6_23) else "0";
    exitcond3_fu_447_p2 <= "1" when (ll_reg_261 = ap_const_lv4_C) else "0";
    exitcond_fu_710_p2 <= "1" when (jj_reg_318 = ap_const_lv4_C) else "0";

    grp_fu_379_opcode_assign_proc : process(tmp_43_reg_853, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_379_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_43_reg_853 = ap_const_lv1_0)))) then 
            grp_fu_379_opcode <= ap_const_lv2_0;
        else 
            grp_fu_379_opcode <= "XX";
        end if; 
    end process;


    grp_fu_379_p0_assign_proc : process(U_unc_q0, ap_CS_fsm_state7, ap_CS_fsm_state11, tmp_38_reg_912, dist_matmul_reg_306, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_379_p0 <= tmp_38_reg_912;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_379_p0 <= U_unc_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_379_p0 <= dist_matmul_reg_306;
        else 
            grp_fu_379_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_379_p1_assign_proc : process(V_Gen_a_q0, ap_CS_fsm_state7, ap_CS_fsm_state11, dist_array_load_reg_907, dist_matmul_reg_306, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_379_p1 <= dist_array_load_reg_907;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_379_p1 <= dist_matmul_reg_306;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_379_p1 <= V_Gen_a_q0;
        else 
            grp_fu_379_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_402_p0_assign_proc : process(reg_422, ap_CS_fsm_state16, ap_CS_fsm_state21, p_0_fu_102)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_402_p0 <= reg_422;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_402_p0 <= p_0_fu_102;
        else 
            grp_fu_402_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_416_p2 <= std_logic_vector(unsigned(kk_reg_355) + unsigned(ap_const_lv4_F));
    i_fu_474_p2 <= std_logic_vector(unsigned(i1_reg_284) + unsigned(ap_const_lv6_1));
    icmp_fu_760_p2 <= "1" when (signed(tmp_69_fu_750_p4) > signed(ap_const_lv31_0)) else "0";
    ii_1_fu_513_p2 <= std_logic_vector(unsigned(ii_reg_295) + unsigned(ap_const_lv4_1));
    ii_cast_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii_reg_295),32));
    indvarinc_fu_430_p2 <= std_logic_vector(unsigned(invdar_reg_250) + unsigned(ap_const_lv4_1));
    jj_1_fu_716_p2 <= std_logic_vector(unsigned(jj_reg_318) + unsigned(ap_const_lv4_1));
    level_1_fu_699_p2 <= std_logic_vector(signed(level_reg_272) + signed(ap_const_lv32_1));
    level_5_cast_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(level_2_reg_976),32));
    ll_1_fu_453_p2 <= std_logic_vector(unsigned(ll_reg_261) + unsigned(ap_const_lv4_1));
    notlhs1_fu_657_p2 <= "0" when (tmp_54_fu_625_p4 = ap_const_lv11_7FF) else "1";
    notlhs_fu_639_p2 <= "0" when (tmp_42_fu_608_p4 = ap_const_lv11_7FF) else "1";
    notrhs1_fu_663_p2 <= "1" when (tmp_68_fu_635_p1 = ap_const_lv52_0) else "0";
    notrhs_fu_645_p2 <= "1" when (tmp_62_fu_618_p1 = ap_const_lv52_0) else "0";
    sel_tmp1_fu_557_p2 <= (tmp_47_reg_880 and sel_tmp_fu_552_p2);
    sel_tmp5_demorgan_fu_570_p2 <= (tmp_47_reg_880 or tmp_43_reg_853);
    sel_tmp5_fu_574_p2 <= (sel_tmp5_demorgan_fu_570_p2 xor ap_const_lv1_1);
    sel_tmp6_fu_580_p2 <= (tmp_51_reg_892 and sel_tmp5_fu_574_p2);
    sel_tmp_fu_552_p2 <= (tmp_43_reg_853 xor ap_const_lv1_1);

    switch_point_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, tmp_36_fu_480_p1, switch_point_addr_2_reg_830, ap_CS_fsm_state21, ap_CS_fsm_state22, switch_point_addr_3_reg_967, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state26, tmp_34_fu_459_p1, tmp_58_fu_745_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            switch_point_address0 <= switch_point_addr_3_reg_967;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            switch_point_address0 <= tmp_58_fu_745_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            switch_point_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            switch_point_address0 <= switch_point_addr_2_reg_830;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            switch_point_address0 <= tmp_36_fu_480_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            switch_point_address0 <= tmp_34_fu_459_p1(4 - 1 downto 0);
        else 
            switch_point_address0 <= "XXXX";
        end if; 
    end process;


    switch_point_address1_assign_proc : process(ap_CS_fsm_state28, switch_point_addr_4_reg_981, ap_CS_fsm_state29, tmp_60_fu_766_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            switch_point_address1 <= switch_point_addr_4_reg_981;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            switch_point_address1 <= tmp_60_fu_766_p1(4 - 1 downto 0);
        else 
            switch_point_address1 <= "XXXX";
        end if; 
    end process;


    switch_point_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            switch_point_ce0 <= ap_const_logic_1;
        else 
            switch_point_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    switch_point_ce1_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            switch_point_ce1 <= ap_const_logic_1;
        else 
            switch_point_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    switch_point_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state21, ap_CS_fsm_state28, ap_CS_fsm_state26, tmp_44_fu_687_p2, tmp_52_fu_732_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            switch_point_d0 <= tmp_52_fu_732_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            switch_point_d0 <= tmp_44_fu_687_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            switch_point_d0 <= ap_const_lv32_FFFFFFFF;
        else 
            switch_point_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    switch_point_d1 <= std_logic_vector(unsigned(switch_point_q1) + unsigned(ap_const_lv32_1));

    switch_point_we0_assign_proc : process(ap_CS_fsm_state3, exitcond3_fu_447_p2, tmp_67_fu_681_p2, tmp_67_reg_928, ap_CS_fsm_state21, tmp_45_reg_932, icmp_fu_760_p2, ap_CS_fsm_state28, ap_CS_fsm_state26)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_447_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (tmp_45_reg_932 = ap_const_lv1_1) and (tmp_67_reg_928 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_fu_760_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (tmp_67_fu_681_p2 = ap_const_lv1_0)))) then 
            switch_point_we0 <= ap_const_logic_1;
        else 
            switch_point_we0 <= ap_const_logic_0;
        end if; 
    end process;


    switch_point_we1_assign_proc : process(icmp_reg_972, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) and (icmp_reg_972 = ap_const_lv1_1))) then 
            switch_point_we1 <= ap_const_logic_1;
        else 
            switch_point_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_34_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ll_reg_261),64));
        tmp_36_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(level_reg_272),64));

    tmp_37_fu_497_p2 <= std_logic_vector(unsigned(tmp_53_fu_485_p2) - unsigned(tmp_59_fu_491_p2));
    tmp_39_to_int_fu_604_p1 <= grp_fu_402_p1;
    tmp_41_to_int_fu_622_p1 <= tmp_41_reg_922;
    tmp_42_fu_608_p4 <= tmp_39_to_int_fu_604_p1(62 downto 52);
    tmp_43_fu_519_p2 <= "1" when (signed(ii_cast_fu_503_p1) > signed(level_reg_272)) else "0";
    tmp_44_fu_687_p2 <= std_logic_vector(unsigned(switch_point_load_reg_835) + unsigned(ap_const_lv32_1));
    tmp_45_fu_693_p2 <= "1" when (level_reg_272 = ap_const_lv32_B) else "0";
    tmp_46_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii_reg_295),64));
    tmp_47_fu_540_p2 <= "1" when (U_q0 = ap_const_lv32_1) else "0";
        tmp_48_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(level_1_fu_699_p2),64));

    tmp_49_fu_530_p2 <= std_logic_vector(unsigned(ii_cast_fu_503_p1) + unsigned(tmp_37_reg_840));
        tmp_50_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_49_fu_530_p2),64));

    tmp_51_fu_546_p2 <= "1" when (U_q0 = ap_const_lv32_FFFFFFFF) else "0";
    tmp_52_fu_732_p2 <= std_logic_vector(unsigned(switch_point_q0) + unsigned(ap_const_lv32_1));
    tmp_53_fu_485_p2 <= std_logic_vector(shift_left(unsigned(level_reg_272),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    tmp_54_fu_625_p4 <= tmp_41_to_int_fu_622_p1(62 downto 52);
    tmp_55_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(jj_reg_318),64));
    tmp_57_fu_739_p2 <= "1" when (kk_reg_355 = ap_const_lv4_0) else "0";
    tmp_58_fu_745_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kk_reg_355),64));
    tmp_59_fu_491_p2 <= std_logic_vector(shift_left(unsigned(level_reg_272),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_60_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_416_p2),64));
    tmp_62_fu_618_p1 <= tmp_39_to_int_fu_604_p1(52 - 1 downto 0);
    tmp_63_fu_651_p2 <= (notrhs_fu_645_p2 or notlhs_fu_639_p2);
    tmp_64_fu_669_p2 <= (notrhs1_fu_663_p2 or notlhs1_fu_657_p2);
    tmp_65_fu_675_p2 <= (tmp_64_fu_669_p2 and tmp_63_fu_651_p2);
    tmp_67_fu_681_p2 <= (tmp_66_fu_411_p2 and tmp_65_fu_675_p2);
    tmp_68_fu_635_p1 <= tmp_41_to_int_fu_622_p1(52 - 1 downto 0);
    tmp_69_fu_750_p4 <= switch_point_q0(31 downto 1);
    tmp_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar_reg_250),64));
    tmp_s_fu_441_p2 <= "1" when (invdar_reg_250 = ap_const_lv4_B) else "0";
end behav;
