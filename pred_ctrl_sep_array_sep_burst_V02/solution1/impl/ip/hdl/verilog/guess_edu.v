// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module guess_edu (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        U_KK_a_address0,
        U_KK_a_ce0,
        U_KK_a_q0,
        V_Gen_a_cpy_address0,
        V_Gen_a_cpy_ce0,
        V_Gen_a_cpy_q0,
        U_unc_kk_address0,
        U_unc_kk_ce0,
        U_unc_kk_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 25'd1;
parameter    ap_ST_fsm_state2 = 25'd2;
parameter    ap_ST_fsm_state3 = 25'd4;
parameter    ap_ST_fsm_state4 = 25'd8;
parameter    ap_ST_fsm_state5 = 25'd16;
parameter    ap_ST_fsm_state6 = 25'd32;
parameter    ap_ST_fsm_state7 = 25'd64;
parameter    ap_ST_fsm_state8 = 25'd128;
parameter    ap_ST_fsm_state9 = 25'd256;
parameter    ap_ST_fsm_state10 = 25'd512;
parameter    ap_ST_fsm_state11 = 25'd1024;
parameter    ap_ST_fsm_state12 = 25'd2048;
parameter    ap_ST_fsm_state13 = 25'd4096;
parameter    ap_ST_fsm_state14 = 25'd8192;
parameter    ap_ST_fsm_state15 = 25'd16384;
parameter    ap_ST_fsm_state16 = 25'd32768;
parameter    ap_ST_fsm_state17 = 25'd65536;
parameter    ap_ST_fsm_state18 = 25'd131072;
parameter    ap_ST_fsm_state19 = 25'd262144;
parameter    ap_ST_fsm_state20 = 25'd524288;
parameter    ap_ST_fsm_state21 = 25'd1048576;
parameter    ap_ST_fsm_state22 = 25'd2097152;
parameter    ap_ST_fsm_state23 = 25'd4194304;
parameter    ap_ST_fsm_state24 = 25'd8388608;
parameter    ap_ST_fsm_state25 = 25'd16777216;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] U_KK_a_address0;
output   U_KK_a_ce0;
input  [31:0] U_KK_a_q0;
output  [7:0] V_Gen_a_cpy_address0;
output   V_Gen_a_cpy_ce0;
input  [31:0] V_Gen_a_cpy_q0;
output  [3:0] U_unc_kk_address0;
output   U_unc_kk_ce0;
input  [31:0] U_unc_kk_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] U_KK_a_address0;
reg U_KK_a_ce0;
reg V_Gen_a_cpy_ce0;
reg U_unc_kk_ce0;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_229_p2;
reg   [31:0] reg_233;
wire    ap_CS_fsm_state11;
reg   [0:0] tmp_77_reg_455;
wire    ap_CS_fsm_state21;
wire   [3:0] indvarinc_fu_238_p2;
wire    ap_CS_fsm_state2;
wire   [63:0] tmp_71_fu_261_p1;
reg   [63:0] tmp_71_reg_406;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond3_fu_255_p2;
wire   [3:0] i_3_fu_266_p2;
reg   [3:0] i_3_reg_416;
wire   [3:0] i_4_fu_278_p2;
reg   [3:0] i_4_reg_424;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond2_fu_272_p2;
wire   [3:0] row_14_fu_306_p2;
reg   [3:0] row_14_reg_437;
wire    ap_CS_fsm_state7;
wire   [8:0] tmp_75_fu_336_p2;
reg   [8:0] tmp_75_reg_442;
wire   [0:0] exitcond1_fu_300_p2;
wire   [3:0] col_4_fu_352_p2;
reg   [3:0] col_4_reg_450;
wire    ap_CS_fsm_state8;
wire   [0:0] tmp_77_fu_358_p2;
wire   [0:0] exitcond_fu_346_p2;
reg   [31:0] V_Gen_a_cpy_load_reg_475;
wire    ap_CS_fsm_state9;
wire   [31:0] u_educated_q0;
reg   [31:0] u_educated_load_reg_480;
wire   [31:0] temp_value_1_fu_388_p3;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire   [31:0] grp_fu_221_p2;
reg   [31:0] temp_value_2_reg_495;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state25;
reg   [3:0] u_educated_address0;
reg    u_educated_ce0;
reg    u_educated_we0;
reg   [31:0] u_educated_d0;
reg   [3:0] invdar_reg_140;
wire   [0:0] tmp_s_fu_249_p2;
reg   [3:0] i_reg_151;
wire    ap_CS_fsm_state4;
reg   [3:0] i1_reg_162;
wire    ap_CS_fsm_state6;
reg   [31:0] educated_rho_reg_174;
reg   [3:0] row_reg_186;
reg   [31:0] temp_value_reg_198;
reg   [3:0] col_reg_210;
wire   [63:0] tmp_fu_244_p1;
wire   [63:0] tmp_73_fu_290_p1;
wire   [63:0] tmp_74_fu_295_p1;
wire   [63:0] tmp_79_fu_373_p1;
wire   [63:0] tmp_80_fu_378_p1;
wire   [63:0] tmp_76_fu_383_p1;
reg   [31:0] grp_fu_221_p0;
reg   [31:0] grp_fu_221_p1;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state22;
reg   [31:0] grp_fu_229_p0;
reg   [31:0] grp_fu_229_p1;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state20;
wire   [3:0] tmp_72_fu_284_p2;
wire   [7:0] p_shl_fu_312_p3;
wire   [5:0] p_shl5_fu_324_p3;
wire   [8:0] p_shl_cast_fu_320_p1;
wire   [8:0] p_shl5_cast_fu_332_p1;
wire   [8:0] col_cast2_fu_342_p1;
wire   [8:0] tmp_78_fu_364_p2;
wire  signed [31:0] tmp_78_cast_fu_369_p1;
reg   [1:0] grp_fu_221_opcode;
reg   [31:0] ap_return_preg;
reg   [24:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 25'd1;
#0 ap_return_preg = 32'd0;
end

guess_edu_u_educaibs #(
    .DataWidth( 32 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
u_educated_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(u_educated_address0),
    .ce0(u_educated_ce0),
    .we0(u_educated_we0),
    .d0(u_educated_d0),
    .q0(u_educated_q0)
);

predictive_controbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
predictive_controbkb_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_221_p0),
    .din1(grp_fu_221_p1),
    .opcode(grp_fu_221_opcode),
    .ce(1'b1),
    .dout(grp_fu_221_p2)
);

predictive_controcud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
predictive_controcud_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_229_p0),
    .din1(grp_fu_229_p1),
    .ce(1'b1),
    .dout(grp_fu_229_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state7) & (exitcond1_fu_300_p2 == 1'd1))) begin
            ap_return_preg <= educated_rho_reg_174;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        col_reg_210 <= col_4_reg_450;
    end else if (((exitcond1_fu_300_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        col_reg_210 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_272_p2 == 1'd1))) begin
        educated_rho_reg_174 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        educated_rho_reg_174 <= grp_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_255_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i1_reg_162 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        i1_reg_162 <= i_4_reg_424;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_249_p2 == 1'd1))) begin
        i_reg_151 <= 4'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_151 <= i_3_reg_416;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_249_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        invdar_reg_140 <= indvarinc_fu_238_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        invdar_reg_140 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_272_p2 == 1'd1))) begin
        row_reg_186 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        row_reg_186 <= row_14_reg_437;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        temp_value_reg_198 <= temp_value_1_fu_388_p3;
    end else if (((exitcond1_fu_300_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        temp_value_reg_198 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        V_Gen_a_cpy_load_reg_475 <= V_Gen_a_cpy_q0;
        u_educated_load_reg_480 <= u_educated_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        col_4_reg_450 <= col_4_fu_352_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_255_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_3_reg_416 <= i_3_fu_266_p2;
        tmp_71_reg_406[3 : 0] <= tmp_71_fu_261_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_4_reg_424 <= i_4_fu_278_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) | ((tmp_77_reg_455 == 1'd0) & (1'b1 == ap_CS_fsm_state11)))) begin
        reg_233 <= grp_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        row_14_reg_437 <= row_14_fu_306_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        temp_value_2_reg_495 <= grp_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_300_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        tmp_75_reg_442[8 : 2] <= tmp_75_fu_336_p2[8 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_346_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        tmp_77_reg_455 <= tmp_77_fu_358_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        U_KK_a_address0 = tmp_73_fu_290_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        U_KK_a_address0 = tmp_71_fu_261_p1;
    end else begin
        U_KK_a_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5))) begin
        U_KK_a_ce0 = 1'b1;
    end else begin
        U_KK_a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        U_unc_kk_ce0 = 1'b1;
    end else begin
        U_unc_kk_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        V_Gen_a_cpy_ce0 = 1'b1;
    end else begin
        V_Gen_a_cpy_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state7) & (exitcond1_fu_300_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond1_fu_300_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond1_fu_300_p2 == 1'd1))) begin
        ap_return = educated_rho_reg_174;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_221_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state22) | ((tmp_77_reg_455 == 1'd0) & (1'b1 == ap_CS_fsm_state12)))) begin
        grp_fu_221_opcode = 2'd0;
    end else begin
        grp_fu_221_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_221_p0 = educated_rho_reg_174;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_221_p0 = U_unc_kk_q0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_221_p0 = temp_value_reg_198;
    end else begin
        grp_fu_221_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_221_p1 = temp_value_reg_198;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_fu_221_p1 = reg_233;
    end else begin
        grp_fu_221_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_229_p0 = temp_value_2_reg_495;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_229_p0 = V_Gen_a_cpy_load_reg_475;
    end else begin
        grp_fu_229_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_229_p1 = temp_value_2_reg_495;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_229_p1 = u_educated_load_reg_480;
    end else begin
        grp_fu_229_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        u_educated_address0 = tmp_80_fu_378_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        u_educated_address0 = tmp_74_fu_295_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        u_educated_address0 = tmp_71_reg_406;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        u_educated_address0 = tmp_fu_244_p1;
    end else begin
        u_educated_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state8))) begin
        u_educated_ce0 = 1'b1;
    end else begin
        u_educated_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        u_educated_d0 = U_KK_a_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        u_educated_d0 = 32'd0;
    end else begin
        u_educated_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        u_educated_we0 = 1'b1;
    end else begin
        u_educated_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_249_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond3_fu_255_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_272_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (exitcond1_fu_300_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (exitcond_fu_346_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign U_unc_kk_address0 = tmp_76_fu_383_p1;

assign V_Gen_a_cpy_address0 = tmp_79_fu_373_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign col_4_fu_352_p2 = (col_reg_210 + 4'd1);

assign col_cast2_fu_342_p1 = col_reg_210;

assign exitcond1_fu_300_p2 = ((row_reg_186 == 4'd12) ? 1'b1 : 1'b0);

assign exitcond2_fu_272_p2 = ((i1_reg_162 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond3_fu_255_p2 = ((i_reg_151 == 4'd12) ? 1'b1 : 1'b0);

assign exitcond_fu_346_p2 = ((col_reg_210 == 4'd12) ? 1'b1 : 1'b0);

assign i_3_fu_266_p2 = (i_reg_151 + 4'd1);

assign i_4_fu_278_p2 = (i1_reg_162 + 4'd1);

assign indvarinc_fu_238_p2 = (invdar_reg_140 + 4'd1);

assign p_shl5_cast_fu_332_p1 = p_shl5_fu_324_p3;

assign p_shl5_fu_324_p3 = {{row_reg_186}, {2'd0}};

assign p_shl_cast_fu_320_p1 = p_shl_fu_312_p3;

assign p_shl_fu_312_p3 = {{row_reg_186}, {4'd0}};

assign row_14_fu_306_p2 = (row_reg_186 + 4'd1);

assign temp_value_1_fu_388_p3 = ((tmp_77_reg_455[0:0] === 1'b1) ? temp_value_reg_198 : grp_fu_221_p2);

assign tmp_71_fu_261_p1 = i_reg_151;

assign tmp_72_fu_284_p2 = (i1_reg_162 + 4'd3);

assign tmp_73_fu_290_p1 = tmp_72_fu_284_p2;

assign tmp_74_fu_295_p1 = i1_reg_162;

assign tmp_75_fu_336_p2 = (p_shl_cast_fu_320_p1 - p_shl5_cast_fu_332_p1);

assign tmp_76_fu_383_p1 = row_reg_186;

assign tmp_77_fu_358_p2 = ((col_reg_210 > row_reg_186) ? 1'b1 : 1'b0);

assign tmp_78_cast_fu_369_p1 = $signed(tmp_78_fu_364_p2);

assign tmp_78_fu_364_p2 = (tmp_75_reg_442 + col_cast2_fu_342_p1);

assign tmp_79_fu_373_p1 = $unsigned(tmp_78_cast_fu_369_p1);

assign tmp_80_fu_378_p1 = col_reg_210;

assign tmp_fu_244_p1 = invdar_reg_140;

assign tmp_s_fu_249_p2 = ((invdar_reg_140 == 4'd11) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_71_reg_406[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    tmp_75_reg_442[1:0] <= 2'b00;
end

endmodule //guess_edu
